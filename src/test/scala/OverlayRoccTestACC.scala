/****************************************** 
 *      \`-._           __                *
 *       \\  `-..____,.'  `.              *
 *        :`.         /    \`.            *
 *        :  )       :      : \           *
 *         ;'        '   ;  |  :          *
 *         )..      .. .:.`.;  :          *
 *        /::...  .:::...   ` ;           *
 *        ; _ '    __        /:\          *
 *        `:o>   /\o_>      ;:. `.        *
 *       `-`.__ ;   __..--- /:.   \       *
 *       === \_/   ;=====_.':.     ;      *
 *        ,/'`--'...`--....        ;      *
 *             ;                    ;     *
 *           .'                      ;    *
 *         .'                        ;    *
 *       .'     ..     ,      .       ;   *
 *      :       ::..  /      ;::.     |   *
 *     /      `.;::.  |       ;:..    ;   *
 *    :         |:.   :       ;:.    ;    *
 *    :         ::     ;:..   |.    ;     *
 *     :       :;      :::....|     |     *
 *     /\     ,/ \      ;:::::;     ;     *
 *   .:. \:..|    :     ; '.--|     ;     *
 *  ::.  :''  `-.,,;     ;'   ;     ;     *
 * .-'. _.'\      / `;      \,__:      \  *
 * `---'    `----'   ;      /    \,.,,,/  *
 *                  `----`                *
 * ****************************************
 * Yasna Katebzadeh                       *
 * yasna.katebzadeh@gmail.com             *
 ******************************************/
import chisel3._
import chiseltest._
import chisel3.util._
import org.scalatest.flatspec.AnyFlatSpec

class OverlayRoccTestACC extends AnyFlatSpec with ChiselScalatestTester {
  "OverlayRoccTestACC test" should "pass" in {
    test(new OverlayRocc(32, 6, 6, 32)).withAnnotations(Seq(VerilatorBackendAnnotation, WriteVcdAnnotation)) { dut =>
      ///////////////////////////////////////////
      // Accumulate
      ///////////////////////////////////////////
      
      var dataInValid = "b000000".U 
      var dataOutReady = "b111111".U 
      dut.io.dataInValid.poke(dataInValid)
      dut.io.dataOutReady.poke(dataOutReady)
      dut.clock.step(1)

      var cellConfig: UInt = 0.U 

      /*
      // Note: Original 
      val source = Source.fromFile("src/test/scala/Bitstreams/acc.txt")
      for (line <- source.getLines()){  
        cellConfig = ("b" + line).U  
        dut.io.cellConfig.poke(cellConfig)
        dut.clock.step(1)
        dut.clock.step(1)
        dut.clock.step(1)
      }
      source.close()
      */

      cellConfig = "b101111000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000100000000000000000101000000".U
      dut.io.cellConfig.poke(cellConfig)

      dut.clock.step(1)
      dut.clock.step(1)
      dut.clock.step(1)
      cellConfig = "b101100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000001000100000000000000100110000000".U
      dut.io.cellConfig.poke(cellConfig)

      dut.clock.step(1)
      dut.clock.step(1)
      dut.clock.step(1)
      cellConfig = "b101001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000001000100000000000000100110000000".U
      dut.io.cellConfig.poke(cellConfig)

      dut.clock.step(1)
      dut.clock.step(1)
      dut.clock.step(1)
      cellConfig = "b100110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000001000100000000000000100110000000".U
      dut.io.cellConfig.poke(cellConfig)

      dut.clock.step(1)
      dut.clock.step(1)
      dut.clock.step(1)
      cellConfig = "b100011000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000001000100000000000000100110000000".U
      dut.io.cellConfig.poke(cellConfig)

      dut.clock.step(1)
      dut.clock.step(1)
      dut.clock.step(1)
      cellConfig = "b100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000010000001010000000000000000100000010000".U
      dut.io.cellConfig.poke(cellConfig)

      dut.clock.step(1)
      dut.clock.step(1)
      dut.clock.step(1)
      cellConfig = "b101111100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000100100000000000010000111000000".U
      dut.io.cellConfig.poke(cellConfig)

      dut.clock.step(1)
      dut.clock.step(1)
      dut.clock.step(1)
      cellConfig = "b101100100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000010001000100000000000011100111000000".U
      dut.io.cellConfig.poke(cellConfig)

      dut.clock.step(1)
      dut.clock.step(1)
      dut.clock.step(1)
      cellConfig = "b101001100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000010001000100000000000011100111000000".U
      dut.io.cellConfig.poke(cellConfig)

      dut.clock.step(1)
      dut.clock.step(1)
      dut.clock.step(1)
      cellConfig = "b100110100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000010001000100000000000011100111000000".U
      dut.io.cellConfig.poke(cellConfig)

      dut.clock.step(1)
      dut.clock.step(1)
      dut.clock.step(1)
      cellConfig = "b100011100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000010001000100000000000011100111000000".U
      dut.io.cellConfig.poke(cellConfig)

      dut.clock.step(1)
      dut.clock.step(1)
      dut.clock.step(1)
      cellConfig = "b100000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000010001000000000000000011101100000000".U
      dut.io.cellConfig.poke(cellConfig)

      dut.clock.step(1)
      dut.clock.step(1)
      dut.clock.step(1)
      cellConfig = "b110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000100100000000000010000111000000".U
      dut.io.cellConfig.poke(cellConfig)

      dut.clock.step(1)
      dut.clock.step(1)
      dut.clock.step(1)
      cellConfig = "b101101000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000010001000100000000000011100111000000".U
      dut.io.cellConfig.poke(cellConfig)

      dut.clock.step(1)
      dut.clock.step(1)
      dut.clock.step(1)
      cellConfig = "b101010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000010001000100000000000011100111000000".U
      dut.io.cellConfig.poke(cellConfig)

      dut.clock.step(1)
      dut.clock.step(1)
      dut.clock.step(1)
      cellConfig = "b100111000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000010001000100000000000011100111000000".U
      dut.io.cellConfig.poke(cellConfig)

      dut.clock.step(1)
      dut.clock.step(1)
      dut.clock.step(1)
      cellConfig = "b100100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000010001000000000000000011100011000000".U
      dut.io.cellConfig.poke(cellConfig)

      dut.clock.step(1)
      dut.clock.step(1)
      dut.clock.step(1)
      cellConfig = "b100001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000101000000011000000000000000000011000000011001".U
      dut.io.cellConfig.poke(cellConfig)

      dut.clock.step(1)
      dut.clock.step(1)
      dut.clock.step(1)
      cellConfig = "b110000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000100100000000000010000111000000".U
      dut.io.cellConfig.poke(cellConfig)

      dut.clock.step(1)
      dut.clock.step(1)
      dut.clock.step(1)
      cellConfig = "b101101100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000010001000100000000000011100111000000".U
      dut.io.cellConfig.poke(cellConfig)

      dut.clock.step(1)
      dut.clock.step(1)
      dut.clock.step(1)
      cellConfig = "b101010100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000010001000100000000000011100111000000".U
      dut.io.cellConfig.poke(cellConfig)

      dut.clock.step(1)
      dut.clock.step(1)
      dut.clock.step(1)
      cellConfig = "b100111100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000010001000100000000000011100111000000".U
      dut.io.cellConfig.poke(cellConfig)

      dut.clock.step(1)
      dut.clock.step(1)
      dut.clock.step(1)
      cellConfig = "b100100100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010001000100000000000011100100000000".U
      dut.io.cellConfig.poke(cellConfig)

      dut.clock.step(1)
      dut.clock.step(1)
      dut.clock.step(1)
      // Changing the iteration source            
      //cellConfig = "b100001100001000000000110010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000100000000001010000001000000001010000000001001100011001".U
      
      // Test 1
      //cellConfig = "b100001100001000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000100000000001010000001000000001010000000001001100011001".U
      
      // Test 2
      cellConfig = "b100001100001000000000000010100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000100000000001010000001000000001010000000001001100011001".U

      dut.io.cellConfig.poke(cellConfig)

      dut.clock.step(1)
      dut.clock.step(1)
      dut.clock.step(1)
      cellConfig = "b110001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000100100000000000010000111000000".U
      dut.io.cellConfig.poke(cellConfig)

      dut.clock.step(1)
      dut.clock.step(1)
      dut.clock.step(1)
      cellConfig = "b101110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000010001000100000000000011100111000000".U
      dut.io.cellConfig.poke(cellConfig)

      dut.clock.step(1)
      dut.clock.step(1)
      dut.clock.step(1)
      cellConfig = "b101011000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000010001000100000000000011100111000000".U
      dut.io.cellConfig.poke(cellConfig)

      dut.clock.step(1)
      dut.clock.step(1)
      dut.clock.step(1)
      cellConfig = "b101000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000010001000100000000000011100111000000".U
      dut.io.cellConfig.poke(cellConfig)

      dut.clock.step(1)
      dut.clock.step(1)
      dut.clock.step(1)
      cellConfig = "b100101000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000001000010000000100000000000011110100000000".U
      dut.io.cellConfig.poke(cellConfig)

      dut.clock.step(1)
      dut.clock.step(1)
      dut.clock.step(1)
      cellConfig = "b100010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000001000001000000000001101100000000".U
      dut.io.cellConfig.poke(cellConfig)

      dut.clock.step(1)
      dut.clock.step(1)
      dut.clock.step(1)
      cellConfig = "b110001100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000001000000000001000011000000".U
      dut.io.cellConfig.poke(cellConfig)

      dut.clock.step(1)
      dut.clock.step(1)
      dut.clock.step(1)
      cellConfig = "b101110100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000010000000010000000000011010011000000".U
      dut.io.cellConfig.poke(cellConfig)

      dut.clock.step(1)
      dut.clock.step(1)
      dut.clock.step(1)
      cellConfig = "b101011100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000010000000010000000000011010011000000".U
      dut.io.cellConfig.poke(cellConfig)

      dut.clock.step(1)
      dut.clock.step(1)
      dut.clock.step(1)
      cellConfig = "b101000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000010010000010000000000011011101000000".U
      dut.io.cellConfig.poke(cellConfig)

      dut.clock.step(1)
      dut.clock.step(1)
      dut.clock.step(1)
      cellConfig = "b100101100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000100010000000000010010011000000".U
      dut.io.cellConfig.poke(cellConfig)

      dut.clock.step(1)
      dut.clock.step(1)
      dut.clock.step(1)
      cellConfig = "b100010100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000010000000010000000000011011100000000".U
      dut.io.cellConfig.poke(cellConfig)
      dut.clock.step(1)
      
      
      ///////////////////////////////////////////
      // Test 1: c = 2i 
      //         x = Σc (n = 4) + 1
      ///////////////////////////////////////////
      /*
      val din1 = BigInt("00000000"  + "00000001" + "00000002"+ "00000000" + "00000000" + "00000000" ,16).S
      dut.io.dataIn.poke(din1)
      dut.io.dataInValid.poke("b011000".U)
      dut.clock.step(30)
      dut.io.dataInValid.poke("b000000".U)
      

      for (i <- 1 to 16) {
      // ------------------------------------------------------------------------------------------------
      // |                 |    C5     |    C4      |      C3   |     C2     |     C1     |      C0     |
      // ------------------------------------------------------------------------------------------------
      // ------------------------------------------------------------------------------------------------
      // |                 |    a      |     x      |      c    |     -      |     -       |      b     |
      // ------------------------------------------------------------------------------------------------
        val din2 = BigInt("00000000"  + "00000000" + "00000000"+ "00000000" + "00000000" + f"$i%08X" ,16).S
        dut.io.dataIn.poke(din2)
        dut.io.dataInValid.poke("b100001".U)
        dut.clock.step(1)
        dut.io.dataInValid.poke("b000000".U)
        dut.clock.step(10)
      }
      */

      ///////////////////////////////////////////
      // Test 2: c = 2(i+1) 
      //         x = Σc (n = 5) + 2 
      ///////////////////////////////////////////
      
      val din1 = BigInt("00000000"  + "00000002" + "00000002"+ "00000000" + "00000000" + "00000000" ,16).S
      dut.io.dataIn.poke(din1)
      dut.io.dataInValid.poke("b011000".U)
      dut.clock.step(30)
      dut.io.dataInValid.poke("b000000".U)
      

      for (i <- 1 to 16) {
      // ------------------------------------------------------------------------------------------------
      // |                 |    C5     |    C4      |      C3   |     C2     |     C1     |      C0     |
      // ------------------------------------------------------------------------------------------------
      // ------------------------------------------------------------------------------------------------
      // |                 |    a      |     x      |      c    |     -      |     -       |      b     |
      // ------------------------------------------------------------------------------------------------
        val din2 = BigInt((i).formatted("%08X")  + "00000000" + "00000000"+ "00000000" + "00000000" + "00000001" ,16).S
        dut.io.dataIn.poke(din2)
        dut.io.dataInValid.poke("b100001".U)
        dut.clock.step(1)
        dut.io.dataInValid.poke("b000000".U)
        dut.clock.step(10)
      }
      
      // Finish 
      for( i <- 0 to 150){
        dut.clock.step(1)
      } 
      println("End of the simulation")       
    }
  } 
}