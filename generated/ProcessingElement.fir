circuit ProcessingElement :
  module D_FIFO :
    input clock : Clock
    input reset : Reset
    output io : { flip din : SInt<32>, flip din_v : UInt<1>, flip dout_r : UInt<1>, din_r : UInt<1>, dout : SInt<32>, dout_v : UInt<1>}

    reg cntWrite : UInt<5>, clock with :
      reset => (reset, UInt<5>("h0")) @[D_FIFO.scala 55:27]
    reg cntRead : UInt<5>, clock with :
      reset => (reset, UInt<5>("h0")) @[D_FIFO.scala 56:26]
    reg cntData : UInt<6>, clock with :
      reset => (reset, UInt<6>("h0")) @[D_FIFO.scala 57:26]
    smem mem : SInt<32> [32] @[D_FIFO.scala 59:26]
    wire wen : UInt<1> @[D_FIFO.scala 61:19]
    wire ren : UInt<1> @[D_FIFO.scala 62:19]
    wire empty : UInt<1> @[D_FIFO.scala 63:21]
    wire full : UInt<1> @[D_FIFO.scala 64:20]
    reg dout_v : UInt, clock with :
      reset => (UInt<1>("h0"), dout_v) @[D_FIFO.scala 65:25]
    dout_v <= UInt<1>("h0") @[D_FIFO.scala 65:25]
    node _io_din_r_T = not(full) @[D_FIFO.scala 67:17]
    io.din_r <= _io_din_r_T @[D_FIFO.scala 67:14]
    node _wen_T = not(full) @[D_FIFO.scala 68:23]
    node _wen_T_1 = and(io.din_v, _wen_T) @[D_FIFO.scala 68:21]
    wen <= _wen_T_1 @[D_FIFO.scala 68:9]
    node _ren_T = not(empty) @[D_FIFO.scala 69:24]
    node _ren_T_1 = and(io.dout_r, _ren_T) @[D_FIFO.scala 69:22]
    ren <= _ren_T_1 @[D_FIFO.scala 69:9]
    dout_v <= ren @[D_FIFO.scala 71:12]
    io.dout_v <= dout_v @[D_FIFO.scala 73:15]
    node _T = not(full) @[D_FIFO.scala 75:16]
    node _T_1 = and(wen, _T) @[D_FIFO.scala 75:14]
    when _T_1 : @[D_FIFO.scala 75:23]
      node _T_2 = sub(UInt<6>("h20"), UInt<1>("h1")) @[D_FIFO.scala 76:40]
      node _T_3 = tail(_T_2, 1) @[D_FIFO.scala 76:40]
      node _T_4 = eq(cntWrite, _T_3) @[D_FIFO.scala 76:23]
      when _T_4 : @[D_FIFO.scala 76:47]
        cntWrite <= UInt<1>("h0") @[D_FIFO.scala 77:18]
      else :
        node _cntWrite_T = add(cntWrite, UInt<1>("h1")) @[D_FIFO.scala 79:30]
        node _cntWrite_T_1 = tail(_cntWrite_T, 1) @[D_FIFO.scala 79:30]
        cntWrite <= _cntWrite_T_1 @[D_FIFO.scala 79:18]
    node _T_5 = not(empty) @[D_FIFO.scala 84:16]
    node _T_6 = and(ren, _T_5) @[D_FIFO.scala 84:14]
    when _T_6 : @[D_FIFO.scala 84:24]
      node _T_7 = sub(UInt<6>("h20"), UInt<1>("h1")) @[D_FIFO.scala 85:39]
      node _T_8 = tail(_T_7, 1) @[D_FIFO.scala 85:39]
      node _T_9 = eq(cntRead, _T_8) @[D_FIFO.scala 85:22]
      when _T_9 : @[D_FIFO.scala 85:46]
        cntRead <= UInt<1>("h0") @[D_FIFO.scala 86:21]
      else :
        node _cntRead_T = add(cntRead, UInt<1>("h1")) @[D_FIFO.scala 88:32]
        node _cntRead_T_1 = tail(_cntRead_T, 1) @[D_FIFO.scala 88:32]
        cntRead <= _cntRead_T_1 @[D_FIFO.scala 88:21]
    node _T_10 = not(full) @[D_FIFO.scala 93:17]
    node _T_11 = and(wen, _T_10) @[D_FIFO.scala 93:15]
    node _T_12 = not(empty) @[D_FIFO.scala 93:35]
    node _T_13 = and(ren, _T_12) @[D_FIFO.scala 93:33]
    node _T_14 = not(_T_13) @[D_FIFO.scala 93:27]
    node _T_15 = and(_T_11, _T_14) @[D_FIFO.scala 93:25]
    when _T_15 : @[D_FIFO.scala 93:44]
      node _cntData_T = add(cntData, UInt<1>("h1")) @[D_FIFO.scala 94:28]
      node _cntData_T_1 = tail(_cntData_T, 1) @[D_FIFO.scala 94:28]
      cntData <= _cntData_T_1 @[D_FIFO.scala 94:17]
    else :
      node _T_16 = not(full) @[D_FIFO.scala 95:28]
      node _T_17 = and(wen, _T_16) @[D_FIFO.scala 95:26]
      node _T_18 = not(_T_17) @[D_FIFO.scala 95:20]
      node _T_19 = not(empty) @[D_FIFO.scala 95:44]
      node _T_20 = and(ren, _T_19) @[D_FIFO.scala 95:42]
      node _T_21 = and(_T_18, _T_20) @[D_FIFO.scala 95:35]
      when _T_21 : @[D_FIFO.scala 95:53]
        node _cntData_T_2 = sub(cntData, UInt<1>("h1")) @[D_FIFO.scala 96:28]
        node _cntData_T_3 = tail(_cntData_T_2, 1) @[D_FIFO.scala 96:28]
        cntData <= _cntData_T_3 @[D_FIFO.scala 96:17]
    node _T_22 = not(full) @[D_FIFO.scala 100:16]
    node _T_23 = and(wen, _T_22) @[D_FIFO.scala 100:14]
    when _T_23 : @[D_FIFO.scala 100:23]
      write mport MPORT = mem[cntWrite], clock
      MPORT <= io.din
    wire _io_dout_WIRE : UInt @[D_FIFO.scala 103:24]
    _io_dout_WIRE is invalid @[D_FIFO.scala 103:24]
    when UInt<1>("h1") : @[D_FIFO.scala 103:24]
      _io_dout_WIRE <= cntRead @[D_FIFO.scala 103:24]
      node _io_dout_T = or(_io_dout_WIRE, UInt<5>("h0")) @[D_FIFO.scala 103:24]
      node _io_dout_T_1 = bits(_io_dout_T, 4, 0) @[D_FIFO.scala 103:24]
      read mport io_dout_MPORT = mem[_io_dout_T_1], clock @[D_FIFO.scala 103:24]
    io.dout <= io_dout_MPORT @[D_FIFO.scala 103:13]
    node _T_24 = eq(cntData, UInt<6>("h20")) @[D_FIFO.scala 106:18]
    when _T_24 : @[D_FIFO.scala 106:36]
      full <= UInt<1>("h1") @[D_FIFO.scala 107:14]
    else :
      full <= UInt<1>("h0") @[D_FIFO.scala 109:14]
    node _T_25 = eq(cntData, UInt<1>("h0")) @[D_FIFO.scala 111:18]
    when _T_25 : @[D_FIFO.scala 111:27]
      empty <= UInt<1>("h1") @[D_FIFO.scala 112:15]
    else :
      empty <= UInt<1>("h0") @[D_FIFO.scala 114:15]

  module FS :
    input clock : Clock
    input reset : Reset
    output io : { flip ready_out : UInt<5>, flip fork_mask : UInt<5>, ready_in : UInt<1>}

    wire aux : UInt<1>[5] @[FS.scala 51:19]
    wire temp : UInt<1>[5] @[FS.scala 52:20]
    node _aux_0_T = bits(io.fork_mask, 0, 0) @[FS.scala 55:34]
    node _aux_0_T_1 = not(_aux_0_T) @[FS.scala 55:21]
    node _aux_0_T_2 = bits(io.ready_out, 0, 0) @[FS.scala 55:53]
    node _aux_0_T_3 = or(_aux_0_T_1, _aux_0_T_2) @[FS.scala 55:39]
    node _aux_0_T_4 = bits(_aux_0_T_3, 0, 0) @[FS.scala 55:58]
    aux[0] <= _aux_0_T_4 @[FS.scala 55:16]
    node _aux_1_T = bits(io.fork_mask, 1, 1) @[FS.scala 55:34]
    node _aux_1_T_1 = not(_aux_1_T) @[FS.scala 55:21]
    node _aux_1_T_2 = bits(io.ready_out, 1, 1) @[FS.scala 55:53]
    node _aux_1_T_3 = or(_aux_1_T_1, _aux_1_T_2) @[FS.scala 55:39]
    node _aux_1_T_4 = bits(_aux_1_T_3, 0, 0) @[FS.scala 55:58]
    aux[1] <= _aux_1_T_4 @[FS.scala 55:16]
    node _aux_2_T = bits(io.fork_mask, 2, 2) @[FS.scala 55:34]
    node _aux_2_T_1 = not(_aux_2_T) @[FS.scala 55:21]
    node _aux_2_T_2 = bits(io.ready_out, 2, 2) @[FS.scala 55:53]
    node _aux_2_T_3 = or(_aux_2_T_1, _aux_2_T_2) @[FS.scala 55:39]
    node _aux_2_T_4 = bits(_aux_2_T_3, 0, 0) @[FS.scala 55:58]
    aux[2] <= _aux_2_T_4 @[FS.scala 55:16]
    node _aux_3_T = bits(io.fork_mask, 3, 3) @[FS.scala 55:34]
    node _aux_3_T_1 = not(_aux_3_T) @[FS.scala 55:21]
    node _aux_3_T_2 = bits(io.ready_out, 3, 3) @[FS.scala 55:53]
    node _aux_3_T_3 = or(_aux_3_T_1, _aux_3_T_2) @[FS.scala 55:39]
    node _aux_3_T_4 = bits(_aux_3_T_3, 0, 0) @[FS.scala 55:58]
    aux[3] <= _aux_3_T_4 @[FS.scala 55:16]
    node _aux_4_T = bits(io.fork_mask, 4, 4) @[FS.scala 55:34]
    node _aux_4_T_1 = not(_aux_4_T) @[FS.scala 55:21]
    node _aux_4_T_2 = bits(io.ready_out, 4, 4) @[FS.scala 55:53]
    node _aux_4_T_3 = or(_aux_4_T_1, _aux_4_T_2) @[FS.scala 55:39]
    node _aux_4_T_4 = bits(_aux_4_T_3, 0, 0) @[FS.scala 55:58]
    aux[4] <= _aux_4_T_4 @[FS.scala 55:16]
    temp[0] <= aux[0] @[FS.scala 58:13]
    node _temp_1_T = and(temp[0], aux[1]) @[FS.scala 61:30]
    temp[1] <= _temp_1_T @[FS.scala 61:17]
    node _temp_2_T = and(temp[1], aux[2]) @[FS.scala 61:30]
    temp[2] <= _temp_2_T @[FS.scala 61:17]
    node _temp_3_T = and(temp[2], aux[3]) @[FS.scala 61:30]
    temp[3] <= _temp_3_T @[FS.scala 61:17]
    node _temp_4_T = and(temp[3], aux[4]) @[FS.scala 61:30]
    temp[4] <= _temp_4_T @[FS.scala 61:17]
    io.ready_in <= temp[4] @[FS.scala 64:17]

  module ConfMux :
    input clock : Clock
    input reset : Reset
    output io : { flip selector : UInt<2>, flip mux_input : SInt<128>, mux_output : SInt<32>}

    wire inputs : SInt<32>[4] @[ConfMux.scala 25:22]
    node _inputs_0_T = bits(io.mux_input, 31, 0) @[ConfMux.scala 27:35]
    node _inputs_0_T_1 = asSInt(_inputs_0_T) @[ConfMux.scala 27:70]
    inputs[0] <= _inputs_0_T_1 @[ConfMux.scala 27:19]
    node _inputs_1_T = bits(io.mux_input, 63, 32) @[ConfMux.scala 27:35]
    node _inputs_1_T_1 = asSInt(_inputs_1_T) @[ConfMux.scala 27:70]
    inputs[1] <= _inputs_1_T_1 @[ConfMux.scala 27:19]
    node _inputs_2_T = bits(io.mux_input, 95, 64) @[ConfMux.scala 27:35]
    node _inputs_2_T_1 = asSInt(_inputs_2_T) @[ConfMux.scala 27:70]
    inputs[2] <= _inputs_2_T_1 @[ConfMux.scala 27:19]
    node _inputs_3_T = bits(io.mux_input, 127, 96) @[ConfMux.scala 27:35]
    node _inputs_3_T_1 = asSInt(_inputs_3_T) @[ConfMux.scala 27:70]
    inputs[3] <= _inputs_3_T_1 @[ConfMux.scala 27:19]
    io.mux_output <= inputs[io.selector] @[ConfMux.scala 29:19]

  module ConfMux_1 :
    input clock : Clock
    input reset : Reset
    output io : { flip selector : UInt<2>, flip mux_input : SInt<4>, mux_output : SInt<1>}

    wire inputs : SInt<1>[4] @[ConfMux.scala 25:22]
    node _inputs_0_T = bits(io.mux_input, 0, 0) @[ConfMux.scala 27:35]
    node _inputs_0_T_1 = asSInt(_inputs_0_T) @[ConfMux.scala 27:70]
    inputs[0] <= _inputs_0_T_1 @[ConfMux.scala 27:19]
    node _inputs_1_T = bits(io.mux_input, 1, 1) @[ConfMux.scala 27:35]
    node _inputs_1_T_1 = asSInt(_inputs_1_T) @[ConfMux.scala 27:70]
    inputs[1] <= _inputs_1_T_1 @[ConfMux.scala 27:19]
    node _inputs_2_T = bits(io.mux_input, 2, 2) @[ConfMux.scala 27:35]
    node _inputs_2_T_1 = asSInt(_inputs_2_T) @[ConfMux.scala 27:70]
    inputs[2] <= _inputs_2_T_1 @[ConfMux.scala 27:19]
    node _inputs_3_T = bits(io.mux_input, 3, 3) @[ConfMux.scala 27:35]
    node _inputs_3_T_1 = asSInt(_inputs_3_T) @[ConfMux.scala 27:70]
    inputs[3] <= _inputs_3_T_1 @[ConfMux.scala 27:19]
    io.mux_output <= inputs[io.selector] @[ConfMux.scala 29:19]

  module FR :
    input clock : Clock
    input reset : Reset
    output io : { flip valid_in : UInt<4>, flip ready_out : UInt<5>, flip valid_mux_sel : UInt<2>, flip fork_mask : UInt<5>, valid_out : UInt<1>}

    wire aux : UInt<1>[5] @[FR.scala 54:19]
    wire temp : UInt<1>[5] @[FR.scala 55:20]
    wire Vaux : SInt<1> @[FR.scala 56:20]
    node _aux_0_T = bits(io.fork_mask, 0, 0) @[FR.scala 59:34]
    node _aux_0_T_1 = not(_aux_0_T) @[FR.scala 59:21]
    node _aux_0_T_2 = bits(io.ready_out, 0, 0) @[FR.scala 59:53]
    node _aux_0_T_3 = or(_aux_0_T_1, _aux_0_T_2) @[FR.scala 59:39]
    node _aux_0_T_4 = bits(_aux_0_T_3, 0, 0) @[FR.scala 59:58]
    aux[0] <= _aux_0_T_4 @[FR.scala 59:16]
    node _aux_1_T = bits(io.fork_mask, 1, 1) @[FR.scala 59:34]
    node _aux_1_T_1 = not(_aux_1_T) @[FR.scala 59:21]
    node _aux_1_T_2 = bits(io.ready_out, 1, 1) @[FR.scala 59:53]
    node _aux_1_T_3 = or(_aux_1_T_1, _aux_1_T_2) @[FR.scala 59:39]
    node _aux_1_T_4 = bits(_aux_1_T_3, 0, 0) @[FR.scala 59:58]
    aux[1] <= _aux_1_T_4 @[FR.scala 59:16]
    node _aux_2_T = bits(io.fork_mask, 2, 2) @[FR.scala 59:34]
    node _aux_2_T_1 = not(_aux_2_T) @[FR.scala 59:21]
    node _aux_2_T_2 = bits(io.ready_out, 2, 2) @[FR.scala 59:53]
    node _aux_2_T_3 = or(_aux_2_T_1, _aux_2_T_2) @[FR.scala 59:39]
    node _aux_2_T_4 = bits(_aux_2_T_3, 0, 0) @[FR.scala 59:58]
    aux[2] <= _aux_2_T_4 @[FR.scala 59:16]
    node _aux_3_T = bits(io.fork_mask, 3, 3) @[FR.scala 59:34]
    node _aux_3_T_1 = not(_aux_3_T) @[FR.scala 59:21]
    node _aux_3_T_2 = bits(io.ready_out, 3, 3) @[FR.scala 59:53]
    node _aux_3_T_3 = or(_aux_3_T_1, _aux_3_T_2) @[FR.scala 59:39]
    node _aux_3_T_4 = bits(_aux_3_T_3, 0, 0) @[FR.scala 59:58]
    aux[3] <= _aux_3_T_4 @[FR.scala 59:16]
    inst conf_mux of ConfMux_1 @[FR.scala 61:28]
    conf_mux.clock <= clock
    conf_mux.reset <= reset
    conf_mux.io.selector <= io.valid_mux_sel @[FR.scala 62:26]
    node _conf_mux_io_mux_input_T = asSInt(io.valid_in) @[FR.scala 63:44]
    conf_mux.io.mux_input <= _conf_mux_io_mux_input_T @[FR.scala 63:27]
    Vaux <= conf_mux.io.mux_output @[FR.scala 64:10]
    node _aux_4_T = bits(Vaux, 0, 0) @[FR.scala 66:36]
    aux[4] <= _aux_4_T @[FR.scala 66:29]
    temp[0] <= aux[0] @[FR.scala 67:13]
    node _temp_1_T = and(temp[0], aux[1]) @[FR.scala 70:30]
    temp[1] <= _temp_1_T @[FR.scala 70:17]
    node _temp_2_T = and(temp[1], aux[2]) @[FR.scala 70:30]
    temp[2] <= _temp_2_T @[FR.scala 70:17]
    node _temp_3_T = and(temp[2], aux[3]) @[FR.scala 70:30]
    temp[3] <= _temp_3_T @[FR.scala 70:17]
    node _temp_4_T = and(temp[3], aux[4]) @[FR.scala 70:30]
    temp[4] <= _temp_4_T @[FR.scala 70:17]
    io.valid_out <= temp[4] @[FR.scala 72:18]

  module D_REG :
    input clock : Clock
    input reset : Reset
    output io : { flip din : SInt<32>, flip din_v : UInt<1>, flip dout_r : UInt<1>, dout : SInt<32>, dout_v : UInt<1>, din_r : UInt<1>}

    wire data : SInt<32> @[D_REG.scala 51:20]
    wire valid : UInt<1> @[D_REG.scala 52:21]
    data <= asSInt(UInt<1>("h0")) @[D_REG.scala 55:10]
    valid <= UInt<1>("h0") @[D_REG.scala 56:11]
    node _T = eq(io.dout_r, UInt<1>("h1")) @[D_REG.scala 58:21]
    when _T : @[D_REG.scala 58:33]
      data <= io.din @[D_REG.scala 59:14]
      valid <= io.din_v @[D_REG.scala 60:15]
    io.dout <= data @[D_REG.scala 63:13]
    io.dout_v <= valid @[D_REG.scala 64:15]
    io.din_r <= io.dout_r @[D_REG.scala 65:14]

  module D_FIFO_1 :
    input clock : Clock
    input reset : Reset
    output io : { flip din : SInt<32>, flip din_v : UInt<1>, flip dout_r : UInt<1>, din_r : UInt<1>, dout : SInt<32>, dout_v : UInt<1>}

    reg cntWrite : UInt<5>, clock with :
      reset => (reset, UInt<5>("h0")) @[D_FIFO.scala 55:27]
    reg cntRead : UInt<5>, clock with :
      reset => (reset, UInt<5>("h0")) @[D_FIFO.scala 56:26]
    reg cntData : UInt<6>, clock with :
      reset => (reset, UInt<6>("h0")) @[D_FIFO.scala 57:26]
    smem mem : SInt<32> [32] @[D_FIFO.scala 59:26]
    wire wen : UInt<1> @[D_FIFO.scala 61:19]
    wire ren : UInt<1> @[D_FIFO.scala 62:19]
    wire empty : UInt<1> @[D_FIFO.scala 63:21]
    wire full : UInt<1> @[D_FIFO.scala 64:20]
    reg dout_v : UInt, clock with :
      reset => (UInt<1>("h0"), dout_v) @[D_FIFO.scala 65:25]
    dout_v <= UInt<1>("h0") @[D_FIFO.scala 65:25]
    node _io_din_r_T = not(full) @[D_FIFO.scala 67:17]
    io.din_r <= _io_din_r_T @[D_FIFO.scala 67:14]
    node _wen_T = not(full) @[D_FIFO.scala 68:23]
    node _wen_T_1 = and(io.din_v, _wen_T) @[D_FIFO.scala 68:21]
    wen <= _wen_T_1 @[D_FIFO.scala 68:9]
    node _ren_T = not(empty) @[D_FIFO.scala 69:24]
    node _ren_T_1 = and(io.dout_r, _ren_T) @[D_FIFO.scala 69:22]
    ren <= _ren_T_1 @[D_FIFO.scala 69:9]
    dout_v <= ren @[D_FIFO.scala 71:12]
    io.dout_v <= dout_v @[D_FIFO.scala 73:15]
    node _T = not(full) @[D_FIFO.scala 75:16]
    node _T_1 = and(wen, _T) @[D_FIFO.scala 75:14]
    when _T_1 : @[D_FIFO.scala 75:23]
      node _T_2 = sub(UInt<6>("h20"), UInt<1>("h1")) @[D_FIFO.scala 76:40]
      node _T_3 = tail(_T_2, 1) @[D_FIFO.scala 76:40]
      node _T_4 = eq(cntWrite, _T_3) @[D_FIFO.scala 76:23]
      when _T_4 : @[D_FIFO.scala 76:47]
        cntWrite <= UInt<1>("h0") @[D_FIFO.scala 77:18]
      else :
        node _cntWrite_T = add(cntWrite, UInt<1>("h1")) @[D_FIFO.scala 79:30]
        node _cntWrite_T_1 = tail(_cntWrite_T, 1) @[D_FIFO.scala 79:30]
        cntWrite <= _cntWrite_T_1 @[D_FIFO.scala 79:18]
    node _T_5 = not(empty) @[D_FIFO.scala 84:16]
    node _T_6 = and(ren, _T_5) @[D_FIFO.scala 84:14]
    when _T_6 : @[D_FIFO.scala 84:24]
      node _T_7 = sub(UInt<6>("h20"), UInt<1>("h1")) @[D_FIFO.scala 85:39]
      node _T_8 = tail(_T_7, 1) @[D_FIFO.scala 85:39]
      node _T_9 = eq(cntRead, _T_8) @[D_FIFO.scala 85:22]
      when _T_9 : @[D_FIFO.scala 85:46]
        cntRead <= UInt<1>("h0") @[D_FIFO.scala 86:21]
      else :
        node _cntRead_T = add(cntRead, UInt<1>("h1")) @[D_FIFO.scala 88:32]
        node _cntRead_T_1 = tail(_cntRead_T, 1) @[D_FIFO.scala 88:32]
        cntRead <= _cntRead_T_1 @[D_FIFO.scala 88:21]
    node _T_10 = not(full) @[D_FIFO.scala 93:17]
    node _T_11 = and(wen, _T_10) @[D_FIFO.scala 93:15]
    node _T_12 = not(empty) @[D_FIFO.scala 93:35]
    node _T_13 = and(ren, _T_12) @[D_FIFO.scala 93:33]
    node _T_14 = not(_T_13) @[D_FIFO.scala 93:27]
    node _T_15 = and(_T_11, _T_14) @[D_FIFO.scala 93:25]
    when _T_15 : @[D_FIFO.scala 93:44]
      node _cntData_T = add(cntData, UInt<1>("h1")) @[D_FIFO.scala 94:28]
      node _cntData_T_1 = tail(_cntData_T, 1) @[D_FIFO.scala 94:28]
      cntData <= _cntData_T_1 @[D_FIFO.scala 94:17]
    else :
      node _T_16 = not(full) @[D_FIFO.scala 95:28]
      node _T_17 = and(wen, _T_16) @[D_FIFO.scala 95:26]
      node _T_18 = not(_T_17) @[D_FIFO.scala 95:20]
      node _T_19 = not(empty) @[D_FIFO.scala 95:44]
      node _T_20 = and(ren, _T_19) @[D_FIFO.scala 95:42]
      node _T_21 = and(_T_18, _T_20) @[D_FIFO.scala 95:35]
      when _T_21 : @[D_FIFO.scala 95:53]
        node _cntData_T_2 = sub(cntData, UInt<1>("h1")) @[D_FIFO.scala 96:28]
        node _cntData_T_3 = tail(_cntData_T_2, 1) @[D_FIFO.scala 96:28]
        cntData <= _cntData_T_3 @[D_FIFO.scala 96:17]
    node _T_22 = not(full) @[D_FIFO.scala 100:16]
    node _T_23 = and(wen, _T_22) @[D_FIFO.scala 100:14]
    when _T_23 : @[D_FIFO.scala 100:23]
      write mport MPORT = mem[cntWrite], clock
      MPORT <= io.din
    wire _io_dout_WIRE : UInt @[D_FIFO.scala 103:24]
    _io_dout_WIRE is invalid @[D_FIFO.scala 103:24]
    when UInt<1>("h1") : @[D_FIFO.scala 103:24]
      _io_dout_WIRE <= cntRead @[D_FIFO.scala 103:24]
      node _io_dout_T = or(_io_dout_WIRE, UInt<5>("h0")) @[D_FIFO.scala 103:24]
      node _io_dout_T_1 = bits(_io_dout_T, 4, 0) @[D_FIFO.scala 103:24]
      read mport io_dout_MPORT = mem[_io_dout_T_1], clock @[D_FIFO.scala 103:24]
    io.dout <= io_dout_MPORT @[D_FIFO.scala 103:13]
    node _T_24 = eq(cntData, UInt<6>("h20")) @[D_FIFO.scala 106:18]
    when _T_24 : @[D_FIFO.scala 106:36]
      full <= UInt<1>("h1") @[D_FIFO.scala 107:14]
    else :
      full <= UInt<1>("h0") @[D_FIFO.scala 109:14]
    node _T_25 = eq(cntData, UInt<1>("h0")) @[D_FIFO.scala 111:18]
    when _T_25 : @[D_FIFO.scala 111:27]
      empty <= UInt<1>("h1") @[D_FIFO.scala 112:15]
    else :
      empty <= UInt<1>("h0") @[D_FIFO.scala 114:15]

  module FS_1 :
    input clock : Clock
    input reset : Reset
    output io : { flip ready_out : UInt<5>, flip fork_mask : UInt<5>, ready_in : UInt<1>}

    wire aux : UInt<1>[5] @[FS.scala 51:19]
    wire temp : UInt<1>[5] @[FS.scala 52:20]
    node _aux_0_T = bits(io.fork_mask, 0, 0) @[FS.scala 55:34]
    node _aux_0_T_1 = not(_aux_0_T) @[FS.scala 55:21]
    node _aux_0_T_2 = bits(io.ready_out, 0, 0) @[FS.scala 55:53]
    node _aux_0_T_3 = or(_aux_0_T_1, _aux_0_T_2) @[FS.scala 55:39]
    node _aux_0_T_4 = bits(_aux_0_T_3, 0, 0) @[FS.scala 55:58]
    aux[0] <= _aux_0_T_4 @[FS.scala 55:16]
    node _aux_1_T = bits(io.fork_mask, 1, 1) @[FS.scala 55:34]
    node _aux_1_T_1 = not(_aux_1_T) @[FS.scala 55:21]
    node _aux_1_T_2 = bits(io.ready_out, 1, 1) @[FS.scala 55:53]
    node _aux_1_T_3 = or(_aux_1_T_1, _aux_1_T_2) @[FS.scala 55:39]
    node _aux_1_T_4 = bits(_aux_1_T_3, 0, 0) @[FS.scala 55:58]
    aux[1] <= _aux_1_T_4 @[FS.scala 55:16]
    node _aux_2_T = bits(io.fork_mask, 2, 2) @[FS.scala 55:34]
    node _aux_2_T_1 = not(_aux_2_T) @[FS.scala 55:21]
    node _aux_2_T_2 = bits(io.ready_out, 2, 2) @[FS.scala 55:53]
    node _aux_2_T_3 = or(_aux_2_T_1, _aux_2_T_2) @[FS.scala 55:39]
    node _aux_2_T_4 = bits(_aux_2_T_3, 0, 0) @[FS.scala 55:58]
    aux[2] <= _aux_2_T_4 @[FS.scala 55:16]
    node _aux_3_T = bits(io.fork_mask, 3, 3) @[FS.scala 55:34]
    node _aux_3_T_1 = not(_aux_3_T) @[FS.scala 55:21]
    node _aux_3_T_2 = bits(io.ready_out, 3, 3) @[FS.scala 55:53]
    node _aux_3_T_3 = or(_aux_3_T_1, _aux_3_T_2) @[FS.scala 55:39]
    node _aux_3_T_4 = bits(_aux_3_T_3, 0, 0) @[FS.scala 55:58]
    aux[3] <= _aux_3_T_4 @[FS.scala 55:16]
    node _aux_4_T = bits(io.fork_mask, 4, 4) @[FS.scala 55:34]
    node _aux_4_T_1 = not(_aux_4_T) @[FS.scala 55:21]
    node _aux_4_T_2 = bits(io.ready_out, 4, 4) @[FS.scala 55:53]
    node _aux_4_T_3 = or(_aux_4_T_1, _aux_4_T_2) @[FS.scala 55:39]
    node _aux_4_T_4 = bits(_aux_4_T_3, 0, 0) @[FS.scala 55:58]
    aux[4] <= _aux_4_T_4 @[FS.scala 55:16]
    temp[0] <= aux[0] @[FS.scala 58:13]
    node _temp_1_T = and(temp[0], aux[1]) @[FS.scala 61:30]
    temp[1] <= _temp_1_T @[FS.scala 61:17]
    node _temp_2_T = and(temp[1], aux[2]) @[FS.scala 61:30]
    temp[2] <= _temp_2_T @[FS.scala 61:17]
    node _temp_3_T = and(temp[2], aux[3]) @[FS.scala 61:30]
    temp[3] <= _temp_3_T @[FS.scala 61:17]
    node _temp_4_T = and(temp[3], aux[4]) @[FS.scala 61:30]
    temp[4] <= _temp_4_T @[FS.scala 61:17]
    io.ready_in <= temp[4] @[FS.scala 64:17]

  module ConfMux_2 :
    input clock : Clock
    input reset : Reset
    output io : { flip selector : UInt<2>, flip mux_input : SInt<128>, mux_output : SInt<32>}

    wire inputs : SInt<32>[4] @[ConfMux.scala 25:22]
    node _inputs_0_T = bits(io.mux_input, 31, 0) @[ConfMux.scala 27:35]
    node _inputs_0_T_1 = asSInt(_inputs_0_T) @[ConfMux.scala 27:70]
    inputs[0] <= _inputs_0_T_1 @[ConfMux.scala 27:19]
    node _inputs_1_T = bits(io.mux_input, 63, 32) @[ConfMux.scala 27:35]
    node _inputs_1_T_1 = asSInt(_inputs_1_T) @[ConfMux.scala 27:70]
    inputs[1] <= _inputs_1_T_1 @[ConfMux.scala 27:19]
    node _inputs_2_T = bits(io.mux_input, 95, 64) @[ConfMux.scala 27:35]
    node _inputs_2_T_1 = asSInt(_inputs_2_T) @[ConfMux.scala 27:70]
    inputs[2] <= _inputs_2_T_1 @[ConfMux.scala 27:19]
    node _inputs_3_T = bits(io.mux_input, 127, 96) @[ConfMux.scala 27:35]
    node _inputs_3_T_1 = asSInt(_inputs_3_T) @[ConfMux.scala 27:70]
    inputs[3] <= _inputs_3_T_1 @[ConfMux.scala 27:19]
    io.mux_output <= inputs[io.selector] @[ConfMux.scala 29:19]

  module ConfMux_3 :
    input clock : Clock
    input reset : Reset
    output io : { flip selector : UInt<2>, flip mux_input : SInt<4>, mux_output : SInt<1>}

    wire inputs : SInt<1>[4] @[ConfMux.scala 25:22]
    node _inputs_0_T = bits(io.mux_input, 0, 0) @[ConfMux.scala 27:35]
    node _inputs_0_T_1 = asSInt(_inputs_0_T) @[ConfMux.scala 27:70]
    inputs[0] <= _inputs_0_T_1 @[ConfMux.scala 27:19]
    node _inputs_1_T = bits(io.mux_input, 1, 1) @[ConfMux.scala 27:35]
    node _inputs_1_T_1 = asSInt(_inputs_1_T) @[ConfMux.scala 27:70]
    inputs[1] <= _inputs_1_T_1 @[ConfMux.scala 27:19]
    node _inputs_2_T = bits(io.mux_input, 2, 2) @[ConfMux.scala 27:35]
    node _inputs_2_T_1 = asSInt(_inputs_2_T) @[ConfMux.scala 27:70]
    inputs[2] <= _inputs_2_T_1 @[ConfMux.scala 27:19]
    node _inputs_3_T = bits(io.mux_input, 3, 3) @[ConfMux.scala 27:35]
    node _inputs_3_T_1 = asSInt(_inputs_3_T) @[ConfMux.scala 27:70]
    inputs[3] <= _inputs_3_T_1 @[ConfMux.scala 27:19]
    io.mux_output <= inputs[io.selector] @[ConfMux.scala 29:19]

  module FR_1 :
    input clock : Clock
    input reset : Reset
    output io : { flip valid_in : UInt<4>, flip ready_out : UInt<5>, flip valid_mux_sel : UInt<2>, flip fork_mask : UInt<5>, valid_out : UInt<1>}

    wire aux : UInt<1>[5] @[FR.scala 54:19]
    wire temp : UInt<1>[5] @[FR.scala 55:20]
    wire Vaux : SInt<1> @[FR.scala 56:20]
    node _aux_0_T = bits(io.fork_mask, 0, 0) @[FR.scala 59:34]
    node _aux_0_T_1 = not(_aux_0_T) @[FR.scala 59:21]
    node _aux_0_T_2 = bits(io.ready_out, 0, 0) @[FR.scala 59:53]
    node _aux_0_T_3 = or(_aux_0_T_1, _aux_0_T_2) @[FR.scala 59:39]
    node _aux_0_T_4 = bits(_aux_0_T_3, 0, 0) @[FR.scala 59:58]
    aux[0] <= _aux_0_T_4 @[FR.scala 59:16]
    node _aux_1_T = bits(io.fork_mask, 1, 1) @[FR.scala 59:34]
    node _aux_1_T_1 = not(_aux_1_T) @[FR.scala 59:21]
    node _aux_1_T_2 = bits(io.ready_out, 1, 1) @[FR.scala 59:53]
    node _aux_1_T_3 = or(_aux_1_T_1, _aux_1_T_2) @[FR.scala 59:39]
    node _aux_1_T_4 = bits(_aux_1_T_3, 0, 0) @[FR.scala 59:58]
    aux[1] <= _aux_1_T_4 @[FR.scala 59:16]
    node _aux_2_T = bits(io.fork_mask, 2, 2) @[FR.scala 59:34]
    node _aux_2_T_1 = not(_aux_2_T) @[FR.scala 59:21]
    node _aux_2_T_2 = bits(io.ready_out, 2, 2) @[FR.scala 59:53]
    node _aux_2_T_3 = or(_aux_2_T_1, _aux_2_T_2) @[FR.scala 59:39]
    node _aux_2_T_4 = bits(_aux_2_T_3, 0, 0) @[FR.scala 59:58]
    aux[2] <= _aux_2_T_4 @[FR.scala 59:16]
    node _aux_3_T = bits(io.fork_mask, 3, 3) @[FR.scala 59:34]
    node _aux_3_T_1 = not(_aux_3_T) @[FR.scala 59:21]
    node _aux_3_T_2 = bits(io.ready_out, 3, 3) @[FR.scala 59:53]
    node _aux_3_T_3 = or(_aux_3_T_1, _aux_3_T_2) @[FR.scala 59:39]
    node _aux_3_T_4 = bits(_aux_3_T_3, 0, 0) @[FR.scala 59:58]
    aux[3] <= _aux_3_T_4 @[FR.scala 59:16]
    inst conf_mux of ConfMux_3 @[FR.scala 61:28]
    conf_mux.clock <= clock
    conf_mux.reset <= reset
    conf_mux.io.selector <= io.valid_mux_sel @[FR.scala 62:26]
    node _conf_mux_io_mux_input_T = asSInt(io.valid_in) @[FR.scala 63:44]
    conf_mux.io.mux_input <= _conf_mux_io_mux_input_T @[FR.scala 63:27]
    Vaux <= conf_mux.io.mux_output @[FR.scala 64:10]
    node _aux_4_T = bits(Vaux, 0, 0) @[FR.scala 66:36]
    aux[4] <= _aux_4_T @[FR.scala 66:29]
    temp[0] <= aux[0] @[FR.scala 67:13]
    node _temp_1_T = and(temp[0], aux[1]) @[FR.scala 70:30]
    temp[1] <= _temp_1_T @[FR.scala 70:17]
    node _temp_2_T = and(temp[1], aux[2]) @[FR.scala 70:30]
    temp[2] <= _temp_2_T @[FR.scala 70:17]
    node _temp_3_T = and(temp[2], aux[3]) @[FR.scala 70:30]
    temp[3] <= _temp_3_T @[FR.scala 70:17]
    node _temp_4_T = and(temp[3], aux[4]) @[FR.scala 70:30]
    temp[4] <= _temp_4_T @[FR.scala 70:17]
    io.valid_out <= temp[4] @[FR.scala 72:18]

  module D_REG_1 :
    input clock : Clock
    input reset : Reset
    output io : { flip din : SInt<32>, flip din_v : UInt<1>, flip dout_r : UInt<1>, dout : SInt<32>, dout_v : UInt<1>, din_r : UInt<1>}

    wire data : SInt<32> @[D_REG.scala 51:20]
    wire valid : UInt<1> @[D_REG.scala 52:21]
    data <= asSInt(UInt<1>("h0")) @[D_REG.scala 55:10]
    valid <= UInt<1>("h0") @[D_REG.scala 56:11]
    node _T = eq(io.dout_r, UInt<1>("h1")) @[D_REG.scala 58:21]
    when _T : @[D_REG.scala 58:33]
      data <= io.din @[D_REG.scala 59:14]
      valid <= io.din_v @[D_REG.scala 60:15]
    io.dout <= data @[D_REG.scala 63:13]
    io.dout_v <= valid @[D_REG.scala 64:15]
    io.din_r <= io.dout_r @[D_REG.scala 65:14]

  module D_FIFO_2 :
    input clock : Clock
    input reset : Reset
    output io : { flip din : SInt<32>, flip din_v : UInt<1>, flip dout_r : UInt<1>, din_r : UInt<1>, dout : SInt<32>, dout_v : UInt<1>}

    reg cntWrite : UInt<5>, clock with :
      reset => (reset, UInt<5>("h0")) @[D_FIFO.scala 55:27]
    reg cntRead : UInt<5>, clock with :
      reset => (reset, UInt<5>("h0")) @[D_FIFO.scala 56:26]
    reg cntData : UInt<6>, clock with :
      reset => (reset, UInt<6>("h0")) @[D_FIFO.scala 57:26]
    smem mem : SInt<32> [32] @[D_FIFO.scala 59:26]
    wire wen : UInt<1> @[D_FIFO.scala 61:19]
    wire ren : UInt<1> @[D_FIFO.scala 62:19]
    wire empty : UInt<1> @[D_FIFO.scala 63:21]
    wire full : UInt<1> @[D_FIFO.scala 64:20]
    reg dout_v : UInt, clock with :
      reset => (UInt<1>("h0"), dout_v) @[D_FIFO.scala 65:25]
    dout_v <= UInt<1>("h0") @[D_FIFO.scala 65:25]
    node _io_din_r_T = not(full) @[D_FIFO.scala 67:17]
    io.din_r <= _io_din_r_T @[D_FIFO.scala 67:14]
    node _wen_T = not(full) @[D_FIFO.scala 68:23]
    node _wen_T_1 = and(io.din_v, _wen_T) @[D_FIFO.scala 68:21]
    wen <= _wen_T_1 @[D_FIFO.scala 68:9]
    node _ren_T = not(empty) @[D_FIFO.scala 69:24]
    node _ren_T_1 = and(io.dout_r, _ren_T) @[D_FIFO.scala 69:22]
    ren <= _ren_T_1 @[D_FIFO.scala 69:9]
    dout_v <= ren @[D_FIFO.scala 71:12]
    io.dout_v <= dout_v @[D_FIFO.scala 73:15]
    node _T = not(full) @[D_FIFO.scala 75:16]
    node _T_1 = and(wen, _T) @[D_FIFO.scala 75:14]
    when _T_1 : @[D_FIFO.scala 75:23]
      node _T_2 = sub(UInt<6>("h20"), UInt<1>("h1")) @[D_FIFO.scala 76:40]
      node _T_3 = tail(_T_2, 1) @[D_FIFO.scala 76:40]
      node _T_4 = eq(cntWrite, _T_3) @[D_FIFO.scala 76:23]
      when _T_4 : @[D_FIFO.scala 76:47]
        cntWrite <= UInt<1>("h0") @[D_FIFO.scala 77:18]
      else :
        node _cntWrite_T = add(cntWrite, UInt<1>("h1")) @[D_FIFO.scala 79:30]
        node _cntWrite_T_1 = tail(_cntWrite_T, 1) @[D_FIFO.scala 79:30]
        cntWrite <= _cntWrite_T_1 @[D_FIFO.scala 79:18]
    node _T_5 = not(empty) @[D_FIFO.scala 84:16]
    node _T_6 = and(ren, _T_5) @[D_FIFO.scala 84:14]
    when _T_6 : @[D_FIFO.scala 84:24]
      node _T_7 = sub(UInt<6>("h20"), UInt<1>("h1")) @[D_FIFO.scala 85:39]
      node _T_8 = tail(_T_7, 1) @[D_FIFO.scala 85:39]
      node _T_9 = eq(cntRead, _T_8) @[D_FIFO.scala 85:22]
      when _T_9 : @[D_FIFO.scala 85:46]
        cntRead <= UInt<1>("h0") @[D_FIFO.scala 86:21]
      else :
        node _cntRead_T = add(cntRead, UInt<1>("h1")) @[D_FIFO.scala 88:32]
        node _cntRead_T_1 = tail(_cntRead_T, 1) @[D_FIFO.scala 88:32]
        cntRead <= _cntRead_T_1 @[D_FIFO.scala 88:21]
    node _T_10 = not(full) @[D_FIFO.scala 93:17]
    node _T_11 = and(wen, _T_10) @[D_FIFO.scala 93:15]
    node _T_12 = not(empty) @[D_FIFO.scala 93:35]
    node _T_13 = and(ren, _T_12) @[D_FIFO.scala 93:33]
    node _T_14 = not(_T_13) @[D_FIFO.scala 93:27]
    node _T_15 = and(_T_11, _T_14) @[D_FIFO.scala 93:25]
    when _T_15 : @[D_FIFO.scala 93:44]
      node _cntData_T = add(cntData, UInt<1>("h1")) @[D_FIFO.scala 94:28]
      node _cntData_T_1 = tail(_cntData_T, 1) @[D_FIFO.scala 94:28]
      cntData <= _cntData_T_1 @[D_FIFO.scala 94:17]
    else :
      node _T_16 = not(full) @[D_FIFO.scala 95:28]
      node _T_17 = and(wen, _T_16) @[D_FIFO.scala 95:26]
      node _T_18 = not(_T_17) @[D_FIFO.scala 95:20]
      node _T_19 = not(empty) @[D_FIFO.scala 95:44]
      node _T_20 = and(ren, _T_19) @[D_FIFO.scala 95:42]
      node _T_21 = and(_T_18, _T_20) @[D_FIFO.scala 95:35]
      when _T_21 : @[D_FIFO.scala 95:53]
        node _cntData_T_2 = sub(cntData, UInt<1>("h1")) @[D_FIFO.scala 96:28]
        node _cntData_T_3 = tail(_cntData_T_2, 1) @[D_FIFO.scala 96:28]
        cntData <= _cntData_T_3 @[D_FIFO.scala 96:17]
    node _T_22 = not(full) @[D_FIFO.scala 100:16]
    node _T_23 = and(wen, _T_22) @[D_FIFO.scala 100:14]
    when _T_23 : @[D_FIFO.scala 100:23]
      write mport MPORT = mem[cntWrite], clock
      MPORT <= io.din
    wire _io_dout_WIRE : UInt @[D_FIFO.scala 103:24]
    _io_dout_WIRE is invalid @[D_FIFO.scala 103:24]
    when UInt<1>("h1") : @[D_FIFO.scala 103:24]
      _io_dout_WIRE <= cntRead @[D_FIFO.scala 103:24]
      node _io_dout_T = or(_io_dout_WIRE, UInt<5>("h0")) @[D_FIFO.scala 103:24]
      node _io_dout_T_1 = bits(_io_dout_T, 4, 0) @[D_FIFO.scala 103:24]
      read mport io_dout_MPORT = mem[_io_dout_T_1], clock @[D_FIFO.scala 103:24]
    io.dout <= io_dout_MPORT @[D_FIFO.scala 103:13]
    node _T_24 = eq(cntData, UInt<6>("h20")) @[D_FIFO.scala 106:18]
    when _T_24 : @[D_FIFO.scala 106:36]
      full <= UInt<1>("h1") @[D_FIFO.scala 107:14]
    else :
      full <= UInt<1>("h0") @[D_FIFO.scala 109:14]
    node _T_25 = eq(cntData, UInt<1>("h0")) @[D_FIFO.scala 111:18]
    when _T_25 : @[D_FIFO.scala 111:27]
      empty <= UInt<1>("h1") @[D_FIFO.scala 112:15]
    else :
      empty <= UInt<1>("h0") @[D_FIFO.scala 114:15]

  module FS_2 :
    input clock : Clock
    input reset : Reset
    output io : { flip ready_out : UInt<5>, flip fork_mask : UInt<5>, ready_in : UInt<1>}

    wire aux : UInt<1>[5] @[FS.scala 51:19]
    wire temp : UInt<1>[5] @[FS.scala 52:20]
    node _aux_0_T = bits(io.fork_mask, 0, 0) @[FS.scala 55:34]
    node _aux_0_T_1 = not(_aux_0_T) @[FS.scala 55:21]
    node _aux_0_T_2 = bits(io.ready_out, 0, 0) @[FS.scala 55:53]
    node _aux_0_T_3 = or(_aux_0_T_1, _aux_0_T_2) @[FS.scala 55:39]
    node _aux_0_T_4 = bits(_aux_0_T_3, 0, 0) @[FS.scala 55:58]
    aux[0] <= _aux_0_T_4 @[FS.scala 55:16]
    node _aux_1_T = bits(io.fork_mask, 1, 1) @[FS.scala 55:34]
    node _aux_1_T_1 = not(_aux_1_T) @[FS.scala 55:21]
    node _aux_1_T_2 = bits(io.ready_out, 1, 1) @[FS.scala 55:53]
    node _aux_1_T_3 = or(_aux_1_T_1, _aux_1_T_2) @[FS.scala 55:39]
    node _aux_1_T_4 = bits(_aux_1_T_3, 0, 0) @[FS.scala 55:58]
    aux[1] <= _aux_1_T_4 @[FS.scala 55:16]
    node _aux_2_T = bits(io.fork_mask, 2, 2) @[FS.scala 55:34]
    node _aux_2_T_1 = not(_aux_2_T) @[FS.scala 55:21]
    node _aux_2_T_2 = bits(io.ready_out, 2, 2) @[FS.scala 55:53]
    node _aux_2_T_3 = or(_aux_2_T_1, _aux_2_T_2) @[FS.scala 55:39]
    node _aux_2_T_4 = bits(_aux_2_T_3, 0, 0) @[FS.scala 55:58]
    aux[2] <= _aux_2_T_4 @[FS.scala 55:16]
    node _aux_3_T = bits(io.fork_mask, 3, 3) @[FS.scala 55:34]
    node _aux_3_T_1 = not(_aux_3_T) @[FS.scala 55:21]
    node _aux_3_T_2 = bits(io.ready_out, 3, 3) @[FS.scala 55:53]
    node _aux_3_T_3 = or(_aux_3_T_1, _aux_3_T_2) @[FS.scala 55:39]
    node _aux_3_T_4 = bits(_aux_3_T_3, 0, 0) @[FS.scala 55:58]
    aux[3] <= _aux_3_T_4 @[FS.scala 55:16]
    node _aux_4_T = bits(io.fork_mask, 4, 4) @[FS.scala 55:34]
    node _aux_4_T_1 = not(_aux_4_T) @[FS.scala 55:21]
    node _aux_4_T_2 = bits(io.ready_out, 4, 4) @[FS.scala 55:53]
    node _aux_4_T_3 = or(_aux_4_T_1, _aux_4_T_2) @[FS.scala 55:39]
    node _aux_4_T_4 = bits(_aux_4_T_3, 0, 0) @[FS.scala 55:58]
    aux[4] <= _aux_4_T_4 @[FS.scala 55:16]
    temp[0] <= aux[0] @[FS.scala 58:13]
    node _temp_1_T = and(temp[0], aux[1]) @[FS.scala 61:30]
    temp[1] <= _temp_1_T @[FS.scala 61:17]
    node _temp_2_T = and(temp[1], aux[2]) @[FS.scala 61:30]
    temp[2] <= _temp_2_T @[FS.scala 61:17]
    node _temp_3_T = and(temp[2], aux[3]) @[FS.scala 61:30]
    temp[3] <= _temp_3_T @[FS.scala 61:17]
    node _temp_4_T = and(temp[3], aux[4]) @[FS.scala 61:30]
    temp[4] <= _temp_4_T @[FS.scala 61:17]
    io.ready_in <= temp[4] @[FS.scala 64:17]

  module ConfMux_4 :
    input clock : Clock
    input reset : Reset
    output io : { flip selector : UInt<2>, flip mux_input : SInt<128>, mux_output : SInt<32>}

    wire inputs : SInt<32>[4] @[ConfMux.scala 25:22]
    node _inputs_0_T = bits(io.mux_input, 31, 0) @[ConfMux.scala 27:35]
    node _inputs_0_T_1 = asSInt(_inputs_0_T) @[ConfMux.scala 27:70]
    inputs[0] <= _inputs_0_T_1 @[ConfMux.scala 27:19]
    node _inputs_1_T = bits(io.mux_input, 63, 32) @[ConfMux.scala 27:35]
    node _inputs_1_T_1 = asSInt(_inputs_1_T) @[ConfMux.scala 27:70]
    inputs[1] <= _inputs_1_T_1 @[ConfMux.scala 27:19]
    node _inputs_2_T = bits(io.mux_input, 95, 64) @[ConfMux.scala 27:35]
    node _inputs_2_T_1 = asSInt(_inputs_2_T) @[ConfMux.scala 27:70]
    inputs[2] <= _inputs_2_T_1 @[ConfMux.scala 27:19]
    node _inputs_3_T = bits(io.mux_input, 127, 96) @[ConfMux.scala 27:35]
    node _inputs_3_T_1 = asSInt(_inputs_3_T) @[ConfMux.scala 27:70]
    inputs[3] <= _inputs_3_T_1 @[ConfMux.scala 27:19]
    io.mux_output <= inputs[io.selector] @[ConfMux.scala 29:19]

  module ConfMux_5 :
    input clock : Clock
    input reset : Reset
    output io : { flip selector : UInt<2>, flip mux_input : SInt<4>, mux_output : SInt<1>}

    wire inputs : SInt<1>[4] @[ConfMux.scala 25:22]
    node _inputs_0_T = bits(io.mux_input, 0, 0) @[ConfMux.scala 27:35]
    node _inputs_0_T_1 = asSInt(_inputs_0_T) @[ConfMux.scala 27:70]
    inputs[0] <= _inputs_0_T_1 @[ConfMux.scala 27:19]
    node _inputs_1_T = bits(io.mux_input, 1, 1) @[ConfMux.scala 27:35]
    node _inputs_1_T_1 = asSInt(_inputs_1_T) @[ConfMux.scala 27:70]
    inputs[1] <= _inputs_1_T_1 @[ConfMux.scala 27:19]
    node _inputs_2_T = bits(io.mux_input, 2, 2) @[ConfMux.scala 27:35]
    node _inputs_2_T_1 = asSInt(_inputs_2_T) @[ConfMux.scala 27:70]
    inputs[2] <= _inputs_2_T_1 @[ConfMux.scala 27:19]
    node _inputs_3_T = bits(io.mux_input, 3, 3) @[ConfMux.scala 27:35]
    node _inputs_3_T_1 = asSInt(_inputs_3_T) @[ConfMux.scala 27:70]
    inputs[3] <= _inputs_3_T_1 @[ConfMux.scala 27:19]
    io.mux_output <= inputs[io.selector] @[ConfMux.scala 29:19]

  module FR_2 :
    input clock : Clock
    input reset : Reset
    output io : { flip valid_in : UInt<4>, flip ready_out : UInt<5>, flip valid_mux_sel : UInt<2>, flip fork_mask : UInt<5>, valid_out : UInt<1>}

    wire aux : UInt<1>[5] @[FR.scala 54:19]
    wire temp : UInt<1>[5] @[FR.scala 55:20]
    wire Vaux : SInt<1> @[FR.scala 56:20]
    node _aux_0_T = bits(io.fork_mask, 0, 0) @[FR.scala 59:34]
    node _aux_0_T_1 = not(_aux_0_T) @[FR.scala 59:21]
    node _aux_0_T_2 = bits(io.ready_out, 0, 0) @[FR.scala 59:53]
    node _aux_0_T_3 = or(_aux_0_T_1, _aux_0_T_2) @[FR.scala 59:39]
    node _aux_0_T_4 = bits(_aux_0_T_3, 0, 0) @[FR.scala 59:58]
    aux[0] <= _aux_0_T_4 @[FR.scala 59:16]
    node _aux_1_T = bits(io.fork_mask, 1, 1) @[FR.scala 59:34]
    node _aux_1_T_1 = not(_aux_1_T) @[FR.scala 59:21]
    node _aux_1_T_2 = bits(io.ready_out, 1, 1) @[FR.scala 59:53]
    node _aux_1_T_3 = or(_aux_1_T_1, _aux_1_T_2) @[FR.scala 59:39]
    node _aux_1_T_4 = bits(_aux_1_T_3, 0, 0) @[FR.scala 59:58]
    aux[1] <= _aux_1_T_4 @[FR.scala 59:16]
    node _aux_2_T = bits(io.fork_mask, 2, 2) @[FR.scala 59:34]
    node _aux_2_T_1 = not(_aux_2_T) @[FR.scala 59:21]
    node _aux_2_T_2 = bits(io.ready_out, 2, 2) @[FR.scala 59:53]
    node _aux_2_T_3 = or(_aux_2_T_1, _aux_2_T_2) @[FR.scala 59:39]
    node _aux_2_T_4 = bits(_aux_2_T_3, 0, 0) @[FR.scala 59:58]
    aux[2] <= _aux_2_T_4 @[FR.scala 59:16]
    node _aux_3_T = bits(io.fork_mask, 3, 3) @[FR.scala 59:34]
    node _aux_3_T_1 = not(_aux_3_T) @[FR.scala 59:21]
    node _aux_3_T_2 = bits(io.ready_out, 3, 3) @[FR.scala 59:53]
    node _aux_3_T_3 = or(_aux_3_T_1, _aux_3_T_2) @[FR.scala 59:39]
    node _aux_3_T_4 = bits(_aux_3_T_3, 0, 0) @[FR.scala 59:58]
    aux[3] <= _aux_3_T_4 @[FR.scala 59:16]
    inst conf_mux of ConfMux_5 @[FR.scala 61:28]
    conf_mux.clock <= clock
    conf_mux.reset <= reset
    conf_mux.io.selector <= io.valid_mux_sel @[FR.scala 62:26]
    node _conf_mux_io_mux_input_T = asSInt(io.valid_in) @[FR.scala 63:44]
    conf_mux.io.mux_input <= _conf_mux_io_mux_input_T @[FR.scala 63:27]
    Vaux <= conf_mux.io.mux_output @[FR.scala 64:10]
    node _aux_4_T = bits(Vaux, 0, 0) @[FR.scala 66:36]
    aux[4] <= _aux_4_T @[FR.scala 66:29]
    temp[0] <= aux[0] @[FR.scala 67:13]
    node _temp_1_T = and(temp[0], aux[1]) @[FR.scala 70:30]
    temp[1] <= _temp_1_T @[FR.scala 70:17]
    node _temp_2_T = and(temp[1], aux[2]) @[FR.scala 70:30]
    temp[2] <= _temp_2_T @[FR.scala 70:17]
    node _temp_3_T = and(temp[2], aux[3]) @[FR.scala 70:30]
    temp[3] <= _temp_3_T @[FR.scala 70:17]
    node _temp_4_T = and(temp[3], aux[4]) @[FR.scala 70:30]
    temp[4] <= _temp_4_T @[FR.scala 70:17]
    io.valid_out <= temp[4] @[FR.scala 72:18]

  module D_REG_2 :
    input clock : Clock
    input reset : Reset
    output io : { flip din : SInt<32>, flip din_v : UInt<1>, flip dout_r : UInt<1>, dout : SInt<32>, dout_v : UInt<1>, din_r : UInt<1>}

    wire data : SInt<32> @[D_REG.scala 51:20]
    wire valid : UInt<1> @[D_REG.scala 52:21]
    data <= asSInt(UInt<1>("h0")) @[D_REG.scala 55:10]
    valid <= UInt<1>("h0") @[D_REG.scala 56:11]
    node _T = eq(io.dout_r, UInt<1>("h1")) @[D_REG.scala 58:21]
    when _T : @[D_REG.scala 58:33]
      data <= io.din @[D_REG.scala 59:14]
      valid <= io.din_v @[D_REG.scala 60:15]
    io.dout <= data @[D_REG.scala 63:13]
    io.dout_v <= valid @[D_REG.scala 64:15]
    io.din_r <= io.dout_r @[D_REG.scala 65:14]

  module D_FIFO_3 :
    input clock : Clock
    input reset : Reset
    output io : { flip din : SInt<32>, flip din_v : UInt<1>, flip dout_r : UInt<1>, din_r : UInt<1>, dout : SInt<32>, dout_v : UInt<1>}

    reg cntWrite : UInt<5>, clock with :
      reset => (reset, UInt<5>("h0")) @[D_FIFO.scala 55:27]
    reg cntRead : UInt<5>, clock with :
      reset => (reset, UInt<5>("h0")) @[D_FIFO.scala 56:26]
    reg cntData : UInt<6>, clock with :
      reset => (reset, UInt<6>("h0")) @[D_FIFO.scala 57:26]
    smem mem : SInt<32> [32] @[D_FIFO.scala 59:26]
    wire wen : UInt<1> @[D_FIFO.scala 61:19]
    wire ren : UInt<1> @[D_FIFO.scala 62:19]
    wire empty : UInt<1> @[D_FIFO.scala 63:21]
    wire full : UInt<1> @[D_FIFO.scala 64:20]
    reg dout_v : UInt, clock with :
      reset => (UInt<1>("h0"), dout_v) @[D_FIFO.scala 65:25]
    dout_v <= UInt<1>("h0") @[D_FIFO.scala 65:25]
    node _io_din_r_T = not(full) @[D_FIFO.scala 67:17]
    io.din_r <= _io_din_r_T @[D_FIFO.scala 67:14]
    node _wen_T = not(full) @[D_FIFO.scala 68:23]
    node _wen_T_1 = and(io.din_v, _wen_T) @[D_FIFO.scala 68:21]
    wen <= _wen_T_1 @[D_FIFO.scala 68:9]
    node _ren_T = not(empty) @[D_FIFO.scala 69:24]
    node _ren_T_1 = and(io.dout_r, _ren_T) @[D_FIFO.scala 69:22]
    ren <= _ren_T_1 @[D_FIFO.scala 69:9]
    dout_v <= ren @[D_FIFO.scala 71:12]
    io.dout_v <= dout_v @[D_FIFO.scala 73:15]
    node _T = not(full) @[D_FIFO.scala 75:16]
    node _T_1 = and(wen, _T) @[D_FIFO.scala 75:14]
    when _T_1 : @[D_FIFO.scala 75:23]
      node _T_2 = sub(UInt<6>("h20"), UInt<1>("h1")) @[D_FIFO.scala 76:40]
      node _T_3 = tail(_T_2, 1) @[D_FIFO.scala 76:40]
      node _T_4 = eq(cntWrite, _T_3) @[D_FIFO.scala 76:23]
      when _T_4 : @[D_FIFO.scala 76:47]
        cntWrite <= UInt<1>("h0") @[D_FIFO.scala 77:18]
      else :
        node _cntWrite_T = add(cntWrite, UInt<1>("h1")) @[D_FIFO.scala 79:30]
        node _cntWrite_T_1 = tail(_cntWrite_T, 1) @[D_FIFO.scala 79:30]
        cntWrite <= _cntWrite_T_1 @[D_FIFO.scala 79:18]
    node _T_5 = not(empty) @[D_FIFO.scala 84:16]
    node _T_6 = and(ren, _T_5) @[D_FIFO.scala 84:14]
    when _T_6 : @[D_FIFO.scala 84:24]
      node _T_7 = sub(UInt<6>("h20"), UInt<1>("h1")) @[D_FIFO.scala 85:39]
      node _T_8 = tail(_T_7, 1) @[D_FIFO.scala 85:39]
      node _T_9 = eq(cntRead, _T_8) @[D_FIFO.scala 85:22]
      when _T_9 : @[D_FIFO.scala 85:46]
        cntRead <= UInt<1>("h0") @[D_FIFO.scala 86:21]
      else :
        node _cntRead_T = add(cntRead, UInt<1>("h1")) @[D_FIFO.scala 88:32]
        node _cntRead_T_1 = tail(_cntRead_T, 1) @[D_FIFO.scala 88:32]
        cntRead <= _cntRead_T_1 @[D_FIFO.scala 88:21]
    node _T_10 = not(full) @[D_FIFO.scala 93:17]
    node _T_11 = and(wen, _T_10) @[D_FIFO.scala 93:15]
    node _T_12 = not(empty) @[D_FIFO.scala 93:35]
    node _T_13 = and(ren, _T_12) @[D_FIFO.scala 93:33]
    node _T_14 = not(_T_13) @[D_FIFO.scala 93:27]
    node _T_15 = and(_T_11, _T_14) @[D_FIFO.scala 93:25]
    when _T_15 : @[D_FIFO.scala 93:44]
      node _cntData_T = add(cntData, UInt<1>("h1")) @[D_FIFO.scala 94:28]
      node _cntData_T_1 = tail(_cntData_T, 1) @[D_FIFO.scala 94:28]
      cntData <= _cntData_T_1 @[D_FIFO.scala 94:17]
    else :
      node _T_16 = not(full) @[D_FIFO.scala 95:28]
      node _T_17 = and(wen, _T_16) @[D_FIFO.scala 95:26]
      node _T_18 = not(_T_17) @[D_FIFO.scala 95:20]
      node _T_19 = not(empty) @[D_FIFO.scala 95:44]
      node _T_20 = and(ren, _T_19) @[D_FIFO.scala 95:42]
      node _T_21 = and(_T_18, _T_20) @[D_FIFO.scala 95:35]
      when _T_21 : @[D_FIFO.scala 95:53]
        node _cntData_T_2 = sub(cntData, UInt<1>("h1")) @[D_FIFO.scala 96:28]
        node _cntData_T_3 = tail(_cntData_T_2, 1) @[D_FIFO.scala 96:28]
        cntData <= _cntData_T_3 @[D_FIFO.scala 96:17]
    node _T_22 = not(full) @[D_FIFO.scala 100:16]
    node _T_23 = and(wen, _T_22) @[D_FIFO.scala 100:14]
    when _T_23 : @[D_FIFO.scala 100:23]
      write mport MPORT = mem[cntWrite], clock
      MPORT <= io.din
    wire _io_dout_WIRE : UInt @[D_FIFO.scala 103:24]
    _io_dout_WIRE is invalid @[D_FIFO.scala 103:24]
    when UInt<1>("h1") : @[D_FIFO.scala 103:24]
      _io_dout_WIRE <= cntRead @[D_FIFO.scala 103:24]
      node _io_dout_T = or(_io_dout_WIRE, UInt<5>("h0")) @[D_FIFO.scala 103:24]
      node _io_dout_T_1 = bits(_io_dout_T, 4, 0) @[D_FIFO.scala 103:24]
      read mport io_dout_MPORT = mem[_io_dout_T_1], clock @[D_FIFO.scala 103:24]
    io.dout <= io_dout_MPORT @[D_FIFO.scala 103:13]
    node _T_24 = eq(cntData, UInt<6>("h20")) @[D_FIFO.scala 106:18]
    when _T_24 : @[D_FIFO.scala 106:36]
      full <= UInt<1>("h1") @[D_FIFO.scala 107:14]
    else :
      full <= UInt<1>("h0") @[D_FIFO.scala 109:14]
    node _T_25 = eq(cntData, UInt<1>("h0")) @[D_FIFO.scala 111:18]
    when _T_25 : @[D_FIFO.scala 111:27]
      empty <= UInt<1>("h1") @[D_FIFO.scala 112:15]
    else :
      empty <= UInt<1>("h0") @[D_FIFO.scala 114:15]

  module FS_3 :
    input clock : Clock
    input reset : Reset
    output io : { flip ready_out : UInt<5>, flip fork_mask : UInt<5>, ready_in : UInt<1>}

    wire aux : UInt<1>[5] @[FS.scala 51:19]
    wire temp : UInt<1>[5] @[FS.scala 52:20]
    node _aux_0_T = bits(io.fork_mask, 0, 0) @[FS.scala 55:34]
    node _aux_0_T_1 = not(_aux_0_T) @[FS.scala 55:21]
    node _aux_0_T_2 = bits(io.ready_out, 0, 0) @[FS.scala 55:53]
    node _aux_0_T_3 = or(_aux_0_T_1, _aux_0_T_2) @[FS.scala 55:39]
    node _aux_0_T_4 = bits(_aux_0_T_3, 0, 0) @[FS.scala 55:58]
    aux[0] <= _aux_0_T_4 @[FS.scala 55:16]
    node _aux_1_T = bits(io.fork_mask, 1, 1) @[FS.scala 55:34]
    node _aux_1_T_1 = not(_aux_1_T) @[FS.scala 55:21]
    node _aux_1_T_2 = bits(io.ready_out, 1, 1) @[FS.scala 55:53]
    node _aux_1_T_3 = or(_aux_1_T_1, _aux_1_T_2) @[FS.scala 55:39]
    node _aux_1_T_4 = bits(_aux_1_T_3, 0, 0) @[FS.scala 55:58]
    aux[1] <= _aux_1_T_4 @[FS.scala 55:16]
    node _aux_2_T = bits(io.fork_mask, 2, 2) @[FS.scala 55:34]
    node _aux_2_T_1 = not(_aux_2_T) @[FS.scala 55:21]
    node _aux_2_T_2 = bits(io.ready_out, 2, 2) @[FS.scala 55:53]
    node _aux_2_T_3 = or(_aux_2_T_1, _aux_2_T_2) @[FS.scala 55:39]
    node _aux_2_T_4 = bits(_aux_2_T_3, 0, 0) @[FS.scala 55:58]
    aux[2] <= _aux_2_T_4 @[FS.scala 55:16]
    node _aux_3_T = bits(io.fork_mask, 3, 3) @[FS.scala 55:34]
    node _aux_3_T_1 = not(_aux_3_T) @[FS.scala 55:21]
    node _aux_3_T_2 = bits(io.ready_out, 3, 3) @[FS.scala 55:53]
    node _aux_3_T_3 = or(_aux_3_T_1, _aux_3_T_2) @[FS.scala 55:39]
    node _aux_3_T_4 = bits(_aux_3_T_3, 0, 0) @[FS.scala 55:58]
    aux[3] <= _aux_3_T_4 @[FS.scala 55:16]
    node _aux_4_T = bits(io.fork_mask, 4, 4) @[FS.scala 55:34]
    node _aux_4_T_1 = not(_aux_4_T) @[FS.scala 55:21]
    node _aux_4_T_2 = bits(io.ready_out, 4, 4) @[FS.scala 55:53]
    node _aux_4_T_3 = or(_aux_4_T_1, _aux_4_T_2) @[FS.scala 55:39]
    node _aux_4_T_4 = bits(_aux_4_T_3, 0, 0) @[FS.scala 55:58]
    aux[4] <= _aux_4_T_4 @[FS.scala 55:16]
    temp[0] <= aux[0] @[FS.scala 58:13]
    node _temp_1_T = and(temp[0], aux[1]) @[FS.scala 61:30]
    temp[1] <= _temp_1_T @[FS.scala 61:17]
    node _temp_2_T = and(temp[1], aux[2]) @[FS.scala 61:30]
    temp[2] <= _temp_2_T @[FS.scala 61:17]
    node _temp_3_T = and(temp[2], aux[3]) @[FS.scala 61:30]
    temp[3] <= _temp_3_T @[FS.scala 61:17]
    node _temp_4_T = and(temp[3], aux[4]) @[FS.scala 61:30]
    temp[4] <= _temp_4_T @[FS.scala 61:17]
    io.ready_in <= temp[4] @[FS.scala 64:17]

  module ConfMux_6 :
    input clock : Clock
    input reset : Reset
    output io : { flip selector : UInt<2>, flip mux_input : SInt<128>, mux_output : SInt<32>}

    wire inputs : SInt<32>[4] @[ConfMux.scala 25:22]
    node _inputs_0_T = bits(io.mux_input, 31, 0) @[ConfMux.scala 27:35]
    node _inputs_0_T_1 = asSInt(_inputs_0_T) @[ConfMux.scala 27:70]
    inputs[0] <= _inputs_0_T_1 @[ConfMux.scala 27:19]
    node _inputs_1_T = bits(io.mux_input, 63, 32) @[ConfMux.scala 27:35]
    node _inputs_1_T_1 = asSInt(_inputs_1_T) @[ConfMux.scala 27:70]
    inputs[1] <= _inputs_1_T_1 @[ConfMux.scala 27:19]
    node _inputs_2_T = bits(io.mux_input, 95, 64) @[ConfMux.scala 27:35]
    node _inputs_2_T_1 = asSInt(_inputs_2_T) @[ConfMux.scala 27:70]
    inputs[2] <= _inputs_2_T_1 @[ConfMux.scala 27:19]
    node _inputs_3_T = bits(io.mux_input, 127, 96) @[ConfMux.scala 27:35]
    node _inputs_3_T_1 = asSInt(_inputs_3_T) @[ConfMux.scala 27:70]
    inputs[3] <= _inputs_3_T_1 @[ConfMux.scala 27:19]
    io.mux_output <= inputs[io.selector] @[ConfMux.scala 29:19]

  module ConfMux_7 :
    input clock : Clock
    input reset : Reset
    output io : { flip selector : UInt<2>, flip mux_input : SInt<4>, mux_output : SInt<1>}

    wire inputs : SInt<1>[4] @[ConfMux.scala 25:22]
    node _inputs_0_T = bits(io.mux_input, 0, 0) @[ConfMux.scala 27:35]
    node _inputs_0_T_1 = asSInt(_inputs_0_T) @[ConfMux.scala 27:70]
    inputs[0] <= _inputs_0_T_1 @[ConfMux.scala 27:19]
    node _inputs_1_T = bits(io.mux_input, 1, 1) @[ConfMux.scala 27:35]
    node _inputs_1_T_1 = asSInt(_inputs_1_T) @[ConfMux.scala 27:70]
    inputs[1] <= _inputs_1_T_1 @[ConfMux.scala 27:19]
    node _inputs_2_T = bits(io.mux_input, 2, 2) @[ConfMux.scala 27:35]
    node _inputs_2_T_1 = asSInt(_inputs_2_T) @[ConfMux.scala 27:70]
    inputs[2] <= _inputs_2_T_1 @[ConfMux.scala 27:19]
    node _inputs_3_T = bits(io.mux_input, 3, 3) @[ConfMux.scala 27:35]
    node _inputs_3_T_1 = asSInt(_inputs_3_T) @[ConfMux.scala 27:70]
    inputs[3] <= _inputs_3_T_1 @[ConfMux.scala 27:19]
    io.mux_output <= inputs[io.selector] @[ConfMux.scala 29:19]

  module FR_3 :
    input clock : Clock
    input reset : Reset
    output io : { flip valid_in : UInt<4>, flip ready_out : UInt<5>, flip valid_mux_sel : UInt<2>, flip fork_mask : UInt<5>, valid_out : UInt<1>}

    wire aux : UInt<1>[5] @[FR.scala 54:19]
    wire temp : UInt<1>[5] @[FR.scala 55:20]
    wire Vaux : SInt<1> @[FR.scala 56:20]
    node _aux_0_T = bits(io.fork_mask, 0, 0) @[FR.scala 59:34]
    node _aux_0_T_1 = not(_aux_0_T) @[FR.scala 59:21]
    node _aux_0_T_2 = bits(io.ready_out, 0, 0) @[FR.scala 59:53]
    node _aux_0_T_3 = or(_aux_0_T_1, _aux_0_T_2) @[FR.scala 59:39]
    node _aux_0_T_4 = bits(_aux_0_T_3, 0, 0) @[FR.scala 59:58]
    aux[0] <= _aux_0_T_4 @[FR.scala 59:16]
    node _aux_1_T = bits(io.fork_mask, 1, 1) @[FR.scala 59:34]
    node _aux_1_T_1 = not(_aux_1_T) @[FR.scala 59:21]
    node _aux_1_T_2 = bits(io.ready_out, 1, 1) @[FR.scala 59:53]
    node _aux_1_T_3 = or(_aux_1_T_1, _aux_1_T_2) @[FR.scala 59:39]
    node _aux_1_T_4 = bits(_aux_1_T_3, 0, 0) @[FR.scala 59:58]
    aux[1] <= _aux_1_T_4 @[FR.scala 59:16]
    node _aux_2_T = bits(io.fork_mask, 2, 2) @[FR.scala 59:34]
    node _aux_2_T_1 = not(_aux_2_T) @[FR.scala 59:21]
    node _aux_2_T_2 = bits(io.ready_out, 2, 2) @[FR.scala 59:53]
    node _aux_2_T_3 = or(_aux_2_T_1, _aux_2_T_2) @[FR.scala 59:39]
    node _aux_2_T_4 = bits(_aux_2_T_3, 0, 0) @[FR.scala 59:58]
    aux[2] <= _aux_2_T_4 @[FR.scala 59:16]
    node _aux_3_T = bits(io.fork_mask, 3, 3) @[FR.scala 59:34]
    node _aux_3_T_1 = not(_aux_3_T) @[FR.scala 59:21]
    node _aux_3_T_2 = bits(io.ready_out, 3, 3) @[FR.scala 59:53]
    node _aux_3_T_3 = or(_aux_3_T_1, _aux_3_T_2) @[FR.scala 59:39]
    node _aux_3_T_4 = bits(_aux_3_T_3, 0, 0) @[FR.scala 59:58]
    aux[3] <= _aux_3_T_4 @[FR.scala 59:16]
    inst conf_mux of ConfMux_7 @[FR.scala 61:28]
    conf_mux.clock <= clock
    conf_mux.reset <= reset
    conf_mux.io.selector <= io.valid_mux_sel @[FR.scala 62:26]
    node _conf_mux_io_mux_input_T = asSInt(io.valid_in) @[FR.scala 63:44]
    conf_mux.io.mux_input <= _conf_mux_io_mux_input_T @[FR.scala 63:27]
    Vaux <= conf_mux.io.mux_output @[FR.scala 64:10]
    node _aux_4_T = bits(Vaux, 0, 0) @[FR.scala 66:36]
    aux[4] <= _aux_4_T @[FR.scala 66:29]
    temp[0] <= aux[0] @[FR.scala 67:13]
    node _temp_1_T = and(temp[0], aux[1]) @[FR.scala 70:30]
    temp[1] <= _temp_1_T @[FR.scala 70:17]
    node _temp_2_T = and(temp[1], aux[2]) @[FR.scala 70:30]
    temp[2] <= _temp_2_T @[FR.scala 70:17]
    node _temp_3_T = and(temp[2], aux[3]) @[FR.scala 70:30]
    temp[3] <= _temp_3_T @[FR.scala 70:17]
    node _temp_4_T = and(temp[3], aux[4]) @[FR.scala 70:30]
    temp[4] <= _temp_4_T @[FR.scala 70:17]
    io.valid_out <= temp[4] @[FR.scala 72:18]

  module D_REG_3 :
    input clock : Clock
    input reset : Reset
    output io : { flip din : SInt<32>, flip din_v : UInt<1>, flip dout_r : UInt<1>, dout : SInt<32>, dout_v : UInt<1>, din_r : UInt<1>}

    wire data : SInt<32> @[D_REG.scala 51:20]
    wire valid : UInt<1> @[D_REG.scala 52:21]
    data <= asSInt(UInt<1>("h0")) @[D_REG.scala 55:10]
    valid <= UInt<1>("h0") @[D_REG.scala 56:11]
    node _T = eq(io.dout_r, UInt<1>("h1")) @[D_REG.scala 58:21]
    when _T : @[D_REG.scala 58:33]
      data <= io.din @[D_REG.scala 59:14]
      valid <= io.din_v @[D_REG.scala 60:15]
    io.dout <= data @[D_REG.scala 63:13]
    io.dout_v <= valid @[D_REG.scala 64:15]
    io.din_r <= io.dout_r @[D_REG.scala 65:14]

  module ConfMux_8 :
    input clock : Clock
    input reset : Reset
    output io : { flip selector : UInt<3>, flip mux_input : SInt<6>, mux_output : SInt<1>}

    wire inputs : SInt<1>[6] @[ConfMux.scala 25:22]
    node _inputs_0_T = bits(io.mux_input, 0, 0) @[ConfMux.scala 27:35]
    node _inputs_0_T_1 = asSInt(_inputs_0_T) @[ConfMux.scala 27:70]
    inputs[0] <= _inputs_0_T_1 @[ConfMux.scala 27:19]
    node _inputs_1_T = bits(io.mux_input, 1, 1) @[ConfMux.scala 27:35]
    node _inputs_1_T_1 = asSInt(_inputs_1_T) @[ConfMux.scala 27:70]
    inputs[1] <= _inputs_1_T_1 @[ConfMux.scala 27:19]
    node _inputs_2_T = bits(io.mux_input, 2, 2) @[ConfMux.scala 27:35]
    node _inputs_2_T_1 = asSInt(_inputs_2_T) @[ConfMux.scala 27:70]
    inputs[2] <= _inputs_2_T_1 @[ConfMux.scala 27:19]
    node _inputs_3_T = bits(io.mux_input, 3, 3) @[ConfMux.scala 27:35]
    node _inputs_3_T_1 = asSInt(_inputs_3_T) @[ConfMux.scala 27:70]
    inputs[3] <= _inputs_3_T_1 @[ConfMux.scala 27:19]
    node _inputs_4_T = bits(io.mux_input, 4, 4) @[ConfMux.scala 27:35]
    node _inputs_4_T_1 = asSInt(_inputs_4_T) @[ConfMux.scala 27:70]
    inputs[4] <= _inputs_4_T_1 @[ConfMux.scala 27:19]
    node _inputs_5_T = bits(io.mux_input, 5, 5) @[ConfMux.scala 27:35]
    node _inputs_5_T_1 = asSInt(_inputs_5_T) @[ConfMux.scala 27:70]
    inputs[5] <= _inputs_5_T_1 @[ConfMux.scala 27:19]
    io.mux_output <= inputs[io.selector] @[ConfMux.scala 29:19]

  module FR_4 :
    input clock : Clock
    input reset : Reset
    output io : { flip valid_in : UInt<6>, flip ready_out : UInt<4>, flip valid_mux_sel : UInt<3>, flip fork_mask : UInt<4>, valid_out : UInt<1>}

    wire aux : UInt<1>[4] @[FR.scala 54:19]
    wire temp : UInt<1>[4] @[FR.scala 55:20]
    wire Vaux : SInt<1> @[FR.scala 56:20]
    node _aux_0_T = bits(io.fork_mask, 0, 0) @[FR.scala 59:34]
    node _aux_0_T_1 = not(_aux_0_T) @[FR.scala 59:21]
    node _aux_0_T_2 = bits(io.ready_out, 0, 0) @[FR.scala 59:53]
    node _aux_0_T_3 = or(_aux_0_T_1, _aux_0_T_2) @[FR.scala 59:39]
    node _aux_0_T_4 = bits(_aux_0_T_3, 0, 0) @[FR.scala 59:58]
    aux[0] <= _aux_0_T_4 @[FR.scala 59:16]
    node _aux_1_T = bits(io.fork_mask, 1, 1) @[FR.scala 59:34]
    node _aux_1_T_1 = not(_aux_1_T) @[FR.scala 59:21]
    node _aux_1_T_2 = bits(io.ready_out, 1, 1) @[FR.scala 59:53]
    node _aux_1_T_3 = or(_aux_1_T_1, _aux_1_T_2) @[FR.scala 59:39]
    node _aux_1_T_4 = bits(_aux_1_T_3, 0, 0) @[FR.scala 59:58]
    aux[1] <= _aux_1_T_4 @[FR.scala 59:16]
    node _aux_2_T = bits(io.fork_mask, 2, 2) @[FR.scala 59:34]
    node _aux_2_T_1 = not(_aux_2_T) @[FR.scala 59:21]
    node _aux_2_T_2 = bits(io.ready_out, 2, 2) @[FR.scala 59:53]
    node _aux_2_T_3 = or(_aux_2_T_1, _aux_2_T_2) @[FR.scala 59:39]
    node _aux_2_T_4 = bits(_aux_2_T_3, 0, 0) @[FR.scala 59:58]
    aux[2] <= _aux_2_T_4 @[FR.scala 59:16]
    inst conf_mux of ConfMux_8 @[FR.scala 61:28]
    conf_mux.clock <= clock
    conf_mux.reset <= reset
    conf_mux.io.selector <= io.valid_mux_sel @[FR.scala 62:26]
    node _conf_mux_io_mux_input_T = asSInt(io.valid_in) @[FR.scala 63:44]
    conf_mux.io.mux_input <= _conf_mux_io_mux_input_T @[FR.scala 63:27]
    Vaux <= conf_mux.io.mux_output @[FR.scala 64:10]
    node _aux_3_T = bits(Vaux, 0, 0) @[FR.scala 66:36]
    aux[3] <= _aux_3_T @[FR.scala 66:29]
    temp[0] <= aux[0] @[FR.scala 67:13]
    node _temp_1_T = and(temp[0], aux[1]) @[FR.scala 70:30]
    temp[1] <= _temp_1_T @[FR.scala 70:17]
    node _temp_2_T = and(temp[1], aux[2]) @[FR.scala 70:30]
    temp[2] <= _temp_2_T @[FR.scala 70:17]
    node _temp_3_T = and(temp[2], aux[3]) @[FR.scala 70:30]
    temp[3] <= _temp_3_T @[FR.scala 70:17]
    io.valid_out <= temp[3] @[FR.scala 72:18]

  module ConfMux_9 :
    input clock : Clock
    input reset : Reset
    output io : { flip selector : UInt<3>, flip mux_input : SInt<192>, mux_output : SInt<32>}

    wire inputs : SInt<32>[6] @[ConfMux.scala 25:22]
    node _inputs_0_T = bits(io.mux_input, 31, 0) @[ConfMux.scala 27:35]
    node _inputs_0_T_1 = asSInt(_inputs_0_T) @[ConfMux.scala 27:70]
    inputs[0] <= _inputs_0_T_1 @[ConfMux.scala 27:19]
    node _inputs_1_T = bits(io.mux_input, 63, 32) @[ConfMux.scala 27:35]
    node _inputs_1_T_1 = asSInt(_inputs_1_T) @[ConfMux.scala 27:70]
    inputs[1] <= _inputs_1_T_1 @[ConfMux.scala 27:19]
    node _inputs_2_T = bits(io.mux_input, 95, 64) @[ConfMux.scala 27:35]
    node _inputs_2_T_1 = asSInt(_inputs_2_T) @[ConfMux.scala 27:70]
    inputs[2] <= _inputs_2_T_1 @[ConfMux.scala 27:19]
    node _inputs_3_T = bits(io.mux_input, 127, 96) @[ConfMux.scala 27:35]
    node _inputs_3_T_1 = asSInt(_inputs_3_T) @[ConfMux.scala 27:70]
    inputs[3] <= _inputs_3_T_1 @[ConfMux.scala 27:19]
    node _inputs_4_T = bits(io.mux_input, 159, 128) @[ConfMux.scala 27:35]
    node _inputs_4_T_1 = asSInt(_inputs_4_T) @[ConfMux.scala 27:70]
    inputs[4] <= _inputs_4_T_1 @[ConfMux.scala 27:19]
    node _inputs_5_T = bits(io.mux_input, 191, 160) @[ConfMux.scala 27:35]
    node _inputs_5_T_1 = asSInt(_inputs_5_T) @[ConfMux.scala 27:70]
    inputs[5] <= _inputs_5_T_1 @[ConfMux.scala 27:19]
    io.mux_output <= inputs[io.selector] @[ConfMux.scala 29:19]

  module ConfMux_10 :
    input clock : Clock
    input reset : Reset
    output io : { flip selector : UInt<3>, flip mux_input : SInt<6>, mux_output : SInt<1>}

    wire inputs : SInt<1>[6] @[ConfMux.scala 25:22]
    node _inputs_0_T = bits(io.mux_input, 0, 0) @[ConfMux.scala 27:35]
    node _inputs_0_T_1 = asSInt(_inputs_0_T) @[ConfMux.scala 27:70]
    inputs[0] <= _inputs_0_T_1 @[ConfMux.scala 27:19]
    node _inputs_1_T = bits(io.mux_input, 1, 1) @[ConfMux.scala 27:35]
    node _inputs_1_T_1 = asSInt(_inputs_1_T) @[ConfMux.scala 27:70]
    inputs[1] <= _inputs_1_T_1 @[ConfMux.scala 27:19]
    node _inputs_2_T = bits(io.mux_input, 2, 2) @[ConfMux.scala 27:35]
    node _inputs_2_T_1 = asSInt(_inputs_2_T) @[ConfMux.scala 27:70]
    inputs[2] <= _inputs_2_T_1 @[ConfMux.scala 27:19]
    node _inputs_3_T = bits(io.mux_input, 3, 3) @[ConfMux.scala 27:35]
    node _inputs_3_T_1 = asSInt(_inputs_3_T) @[ConfMux.scala 27:70]
    inputs[3] <= _inputs_3_T_1 @[ConfMux.scala 27:19]
    node _inputs_4_T = bits(io.mux_input, 4, 4) @[ConfMux.scala 27:35]
    node _inputs_4_T_1 = asSInt(_inputs_4_T) @[ConfMux.scala 27:70]
    inputs[4] <= _inputs_4_T_1 @[ConfMux.scala 27:19]
    node _inputs_5_T = bits(io.mux_input, 5, 5) @[ConfMux.scala 27:35]
    node _inputs_5_T_1 = asSInt(_inputs_5_T) @[ConfMux.scala 27:70]
    inputs[5] <= _inputs_5_T_1 @[ConfMux.scala 27:19]
    io.mux_output <= inputs[io.selector] @[ConfMux.scala 29:19]

  module FR_5 :
    input clock : Clock
    input reset : Reset
    output io : { flip valid_in : UInt<6>, flip ready_out : UInt<4>, flip valid_mux_sel : UInt<3>, flip fork_mask : UInt<4>, valid_out : UInt<1>}

    wire aux : UInt<1>[4] @[FR.scala 54:19]
    wire temp : UInt<1>[4] @[FR.scala 55:20]
    wire Vaux : SInt<1> @[FR.scala 56:20]
    node _aux_0_T = bits(io.fork_mask, 0, 0) @[FR.scala 59:34]
    node _aux_0_T_1 = not(_aux_0_T) @[FR.scala 59:21]
    node _aux_0_T_2 = bits(io.ready_out, 0, 0) @[FR.scala 59:53]
    node _aux_0_T_3 = or(_aux_0_T_1, _aux_0_T_2) @[FR.scala 59:39]
    node _aux_0_T_4 = bits(_aux_0_T_3, 0, 0) @[FR.scala 59:58]
    aux[0] <= _aux_0_T_4 @[FR.scala 59:16]
    node _aux_1_T = bits(io.fork_mask, 1, 1) @[FR.scala 59:34]
    node _aux_1_T_1 = not(_aux_1_T) @[FR.scala 59:21]
    node _aux_1_T_2 = bits(io.ready_out, 1, 1) @[FR.scala 59:53]
    node _aux_1_T_3 = or(_aux_1_T_1, _aux_1_T_2) @[FR.scala 59:39]
    node _aux_1_T_4 = bits(_aux_1_T_3, 0, 0) @[FR.scala 59:58]
    aux[1] <= _aux_1_T_4 @[FR.scala 59:16]
    node _aux_2_T = bits(io.fork_mask, 2, 2) @[FR.scala 59:34]
    node _aux_2_T_1 = not(_aux_2_T) @[FR.scala 59:21]
    node _aux_2_T_2 = bits(io.ready_out, 2, 2) @[FR.scala 59:53]
    node _aux_2_T_3 = or(_aux_2_T_1, _aux_2_T_2) @[FR.scala 59:39]
    node _aux_2_T_4 = bits(_aux_2_T_3, 0, 0) @[FR.scala 59:58]
    aux[2] <= _aux_2_T_4 @[FR.scala 59:16]
    inst conf_mux of ConfMux_10 @[FR.scala 61:28]
    conf_mux.clock <= clock
    conf_mux.reset <= reset
    conf_mux.io.selector <= io.valid_mux_sel @[FR.scala 62:26]
    node _conf_mux_io_mux_input_T = asSInt(io.valid_in) @[FR.scala 63:44]
    conf_mux.io.mux_input <= _conf_mux_io_mux_input_T @[FR.scala 63:27]
    Vaux <= conf_mux.io.mux_output @[FR.scala 64:10]
    node _aux_3_T = bits(Vaux, 0, 0) @[FR.scala 66:36]
    aux[3] <= _aux_3_T @[FR.scala 66:29]
    temp[0] <= aux[0] @[FR.scala 67:13]
    node _temp_1_T = and(temp[0], aux[1]) @[FR.scala 70:30]
    temp[1] <= _temp_1_T @[FR.scala 70:17]
    node _temp_2_T = and(temp[1], aux[2]) @[FR.scala 70:30]
    temp[2] <= _temp_2_T @[FR.scala 70:17]
    node _temp_3_T = and(temp[2], aux[3]) @[FR.scala 70:30]
    temp[3] <= _temp_3_T @[FR.scala 70:17]
    io.valid_out <= temp[3] @[FR.scala 72:18]

  module ConfMux_11 :
    input clock : Clock
    input reset : Reset
    output io : { flip selector : UInt<3>, flip mux_input : SInt<192>, mux_output : SInt<32>}

    wire inputs : SInt<32>[6] @[ConfMux.scala 25:22]
    node _inputs_0_T = bits(io.mux_input, 31, 0) @[ConfMux.scala 27:35]
    node _inputs_0_T_1 = asSInt(_inputs_0_T) @[ConfMux.scala 27:70]
    inputs[0] <= _inputs_0_T_1 @[ConfMux.scala 27:19]
    node _inputs_1_T = bits(io.mux_input, 63, 32) @[ConfMux.scala 27:35]
    node _inputs_1_T_1 = asSInt(_inputs_1_T) @[ConfMux.scala 27:70]
    inputs[1] <= _inputs_1_T_1 @[ConfMux.scala 27:19]
    node _inputs_2_T = bits(io.mux_input, 95, 64) @[ConfMux.scala 27:35]
    node _inputs_2_T_1 = asSInt(_inputs_2_T) @[ConfMux.scala 27:70]
    inputs[2] <= _inputs_2_T_1 @[ConfMux.scala 27:19]
    node _inputs_3_T = bits(io.mux_input, 127, 96) @[ConfMux.scala 27:35]
    node _inputs_3_T_1 = asSInt(_inputs_3_T) @[ConfMux.scala 27:70]
    inputs[3] <= _inputs_3_T_1 @[ConfMux.scala 27:19]
    node _inputs_4_T = bits(io.mux_input, 159, 128) @[ConfMux.scala 27:35]
    node _inputs_4_T_1 = asSInt(_inputs_4_T) @[ConfMux.scala 27:70]
    inputs[4] <= _inputs_4_T_1 @[ConfMux.scala 27:19]
    node _inputs_5_T = bits(io.mux_input, 191, 160) @[ConfMux.scala 27:35]
    node _inputs_5_T_1 = asSInt(_inputs_5_T) @[ConfMux.scala 27:70]
    inputs[5] <= _inputs_5_T_1 @[ConfMux.scala 27:19]
    io.mux_output <= inputs[io.selector] @[ConfMux.scala 29:19]

  module D_EB :
    input clock : Clock
    input reset : Reset
    output io : { flip din : SInt<32>, flip din_v : UInt<1>, din_r : UInt<1>, dout : SInt<32>, dout_v : UInt<1>, flip dout_r : UInt<1>}

    reg reg_din_1 : SInt<32>, clock with :
      reset => (reset, asSInt(UInt<32>("h0"))) @[D_EB.scala 54:28]
    reg reg_din_2 : SInt<32>, clock with :
      reset => (reset, asSInt(UInt<32>("h0"))) @[D_EB.scala 55:28]
    reg reg_din_v_1 : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[D_EB.scala 56:30]
    reg reg_din_v_2 : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[D_EB.scala 57:30]
    reg reg_areg : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[D_EB.scala 58:27]
    when reg_areg : @[D_EB.scala 60:20]
      reg_din_1 <= io.din @[D_EB.scala 61:19]
      reg_din_2 <= reg_din_1 @[D_EB.scala 62:19]
      reg_din_v_1 <= io.din_v @[D_EB.scala 64:21]
      reg_din_v_2 <= reg_din_v_1 @[D_EB.scala 65:21]
    node _reg_areg_T = not(io.dout_v) @[D_EB.scala 68:17]
    node _reg_areg_T_1 = or(_reg_areg_T, io.dout_r) @[D_EB.scala 68:28]
    reg_areg <= _reg_areg_T_1 @[D_EB.scala 68:14]
    io.din_r <= reg_areg @[D_EB.scala 71:14]
    when reg_areg : @[D_EB.scala 73:20]
      io.dout <= reg_din_1 @[D_EB.scala 74:17]
      io.dout_v <= reg_din_v_1 @[D_EB.scala 75:19]
    else :
      io.dout <= reg_din_2 @[D_EB.scala 77:17]
      io.dout_v <= reg_din_v_2 @[D_EB.scala 78:19]

  module D_EB_1 :
    input clock : Clock
    input reset : Reset
    output io : { flip din : SInt<32>, flip din_v : UInt<1>, din_r : UInt<1>, dout : SInt<32>, dout_v : UInt<1>, flip dout_r : UInt<1>}

    reg reg_din_1 : SInt<32>, clock with :
      reset => (reset, asSInt(UInt<32>("h0"))) @[D_EB.scala 54:28]
    reg reg_din_2 : SInt<32>, clock with :
      reset => (reset, asSInt(UInt<32>("h0"))) @[D_EB.scala 55:28]
    reg reg_din_v_1 : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[D_EB.scala 56:30]
    reg reg_din_v_2 : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[D_EB.scala 57:30]
    reg reg_areg : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[D_EB.scala 58:27]
    when reg_areg : @[D_EB.scala 60:20]
      reg_din_1 <= io.din @[D_EB.scala 61:19]
      reg_din_2 <= reg_din_1 @[D_EB.scala 62:19]
      reg_din_v_1 <= io.din_v @[D_EB.scala 64:21]
      reg_din_v_2 <= reg_din_v_1 @[D_EB.scala 65:21]
    node _reg_areg_T = not(io.dout_v) @[D_EB.scala 68:17]
    node _reg_areg_T_1 = or(_reg_areg_T, io.dout_r) @[D_EB.scala 68:28]
    reg_areg <= _reg_areg_T_1 @[D_EB.scala 68:14]
    io.din_r <= reg_areg @[D_EB.scala 71:14]
    when reg_areg : @[D_EB.scala 73:20]
      io.dout <= reg_din_1 @[D_EB.scala 74:17]
      io.dout_v <= reg_din_v_1 @[D_EB.scala 75:19]
    else :
      io.dout <= reg_din_2 @[D_EB.scala 77:17]
      io.dout_v <= reg_din_v_2 @[D_EB.scala 78:19]

  module Join :
    input clock : Clock
    input reset : Reset
    output io : { flip din_1 : SInt<32>, flip din_2 : SInt<32>, flip dout_r : UInt<1>, flip din_1_v : UInt<1>, flip din_2_v : UInt<1>, dout_v : UInt<1>, din_1_r : UInt<1>, din_2_r : UInt<1>, dout_1 : SInt<32>, dout_2 : SInt<32>}

    io.dout_1 <= io.din_1 @[Join.scala 58:15]
    io.dout_2 <= io.din_2 @[Join.scala 59:15]
    node _io_dout_v_T = and(io.din_1_v, io.din_2_v) @[Join.scala 61:29]
    io.dout_v <= _io_dout_v_T @[Join.scala 61:15]
    node _io_din_1_r_T = and(io.dout_r, io.din_2_v) @[Join.scala 63:29]
    io.din_1_r <= _io_din_1_r_T @[Join.scala 63:16]
    node _io_din_2_r_T = and(io.dout_r, io.din_1_v) @[Join.scala 64:29]
    io.din_2_r <= _io_din_2_r_T @[Join.scala 64:16]

  module ALU :
    input clock : Clock
    input reset : Reset
    output io : { flip din_1 : SInt<32>, flip din_2 : SInt<32>, flip op_config : UInt<5>, dout : SInt<32>}

    reg din_1_signed : SInt<32>, clock with :
      reset => (reset, asSInt(UInt<32>("h0"))) @[ALU.scala 79:31]
    reg reg_out : SInt<32>, clock with :
      reset => (reset, asSInt(UInt<32>("h0"))) @[ALU.scala 82:26]
    reg_out <= io.din_1 @[ALU.scala 83:13]
    reg reg_inbit : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[ALU.scala 84:28]
    reg_inbit <= UInt<1>("h0") @[ALU.scala 85:15]
    wire out_aux : SInt<32> @[ALU.scala 88:23]
    node _T = eq(io.op_config, UInt<1>("h0")) @[ALU.scala 94:24]
    when _T : @[ALU.scala 94:33]
      node _out_aux_T = add(io.din_1, io.din_2) @[ALU.scala 95:27]
      node _out_aux_T_1 = tail(_out_aux_T, 1) @[ALU.scala 95:27]
      node _out_aux_T_2 = asSInt(_out_aux_T_1) @[ALU.scala 95:27]
      out_aux <= _out_aux_T_2 @[ALU.scala 95:15]
    else :
      node _T_1 = eq(io.op_config, UInt<1>("h1")) @[ALU.scala 97:29]
      when _T_1 : @[ALU.scala 97:38]
        node _out_aux_T_3 = mul(io.din_1, io.din_2) @[ALU.scala 98:27]
        out_aux <= _out_aux_T_3 @[ALU.scala 98:15]
      else :
        node _T_2 = eq(io.op_config, UInt<2>("h2")) @[ALU.scala 100:29]
        when _T_2 : @[ALU.scala 100:38]
          node _out_aux_T_4 = sub(io.din_1, io.din_2) @[ALU.scala 101:27]
          node _out_aux_T_5 = tail(_out_aux_T_4, 1) @[ALU.scala 101:27]
          node _out_aux_T_6 = asSInt(_out_aux_T_5) @[ALU.scala 101:27]
          out_aux <= _out_aux_T_6 @[ALU.scala 101:15]
        else :
          node _T_3 = eq(io.op_config, UInt<2>("h3")) @[ALU.scala 103:29]
          when _T_3 : @[ALU.scala 103:38]
            node _out_aux_T_7 = bits(io.din_2, 18, 0) @[ALU.scala 105:39]
            node _out_aux_T_8 = dshl(io.din_1, _out_aux_T_7) @[ALU.scala 105:27]
            out_aux <= _out_aux_T_8 @[ALU.scala 105:15]
          else :
            node _T_4 = eq(io.op_config, UInt<3>("h4")) @[ALU.scala 107:29]
            when _T_4 : @[ALU.scala 107:38]
              node _out_aux_T_9 = asUInt(io.din_2) @[ALU.scala 108:39]
              node _out_aux_T_10 = dshr(io.din_1, _out_aux_T_9) @[ALU.scala 108:27]
              out_aux <= _out_aux_T_10 @[ALU.scala 108:15]
            else :
              node _T_5 = eq(io.op_config, UInt<3>("h5")) @[ALU.scala 110:29]
              when _T_5 : @[ALU.scala 110:38]
                node _out_aux_T_11 = asUInt(io.din_1) @[ALU.scala 111:28]
                node _out_aux_T_12 = asUInt(io.din_2) @[ALU.scala 111:47]
                node _out_aux_T_13 = dshr(_out_aux_T_11, _out_aux_T_12) @[ALU.scala 111:35]
                node _out_aux_T_14 = asSInt(_out_aux_T_13) @[ALU.scala 111:55]
                out_aux <= _out_aux_T_14 @[ALU.scala 111:15]
              else :
                node _T_6 = eq(io.op_config, UInt<3>("h6")) @[ALU.scala 113:29]
                when _T_6 : @[ALU.scala 113:38]
                  node _out_aux_T_15 = and(io.din_1, io.din_2) @[ALU.scala 114:27]
                  node _out_aux_T_16 = asSInt(_out_aux_T_15) @[ALU.scala 114:27]
                  out_aux <= _out_aux_T_16 @[ALU.scala 114:15]
                else :
                  node _T_7 = eq(io.op_config, UInt<3>("h7")) @[ALU.scala 116:29]
                  when _T_7 : @[ALU.scala 116:37]
                    node _out_aux_T_17 = or(io.din_1, io.din_2) @[ALU.scala 117:27]
                    node _out_aux_T_18 = asSInt(_out_aux_T_17) @[ALU.scala 117:27]
                    out_aux <= _out_aux_T_18 @[ALU.scala 117:15]
                  else :
                    node _T_8 = eq(io.op_config, UInt<4>("h8")) @[ALU.scala 119:29]
                    when _T_8 : @[ALU.scala 119:38]
                      node _out_aux_T_19 = xor(io.din_1, io.din_2) @[ALU.scala 120:27]
                      node _out_aux_T_20 = asSInt(_out_aux_T_19) @[ALU.scala 120:27]
                      out_aux <= _out_aux_T_20 @[ALU.scala 120:15]
                    else :
                      out_aux <= asSInt(UInt<1>("h0")) @[ALU.scala 123:15]
    io.dout <= out_aux @[ALU.scala 125:11]

  module FU :
    input clock : Clock
    input reset : Reset
    output io : { flip din_1 : SInt<32>, flip din_2 : SInt<32>, flip din_v : UInt<1>, flip dout_r : UInt<1>, flip loop_source : UInt<2>, flip iterations_reset : UInt<16>, flip op_config : UInt<5>, din_r : UInt<1>, dout : SInt<32>, dout_v : UInt<1>}

    wire alu_din_1 : SInt<32> @[FU.scala 71:25]
    wire alu_din_2 : SInt<32> @[FU.scala 72:25]
    wire alu_dout : SInt<32> @[FU.scala 74:24]
    reg reg_dout : SInt<32>, clock with :
      reset => (reset, asSInt(UInt<32>("h0"))) @[FU.scala 75:27]
    reg count : UInt<16>, clock with :
      reset => (reset, UInt<16>("h0")) @[FU.scala 78:24]
    reg loaded : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[FU.scala 84:25]
    reg valid : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[FU.scala 85:24]
    inst ALU of ALU @[FU.scala 89:22]
    ALU.clock <= clock
    ALU.reset <= reset
    ALU.io.din_1 <= alu_din_1 @[FU.scala 90:18]
    ALU.io.din_2 <= alu_din_2 @[FU.scala 91:18]
    alu_dout <= ALU.io.dout @[FU.scala 92:14]
    ALU.io.op_config <= io.op_config @[FU.scala 93:22]
    node _T = eq(io.loop_source, UInt<2>("h0")) @[FU.scala 95:26]
    when _T : @[FU.scala 95:39]
      alu_din_1 <= io.din_1 @[FU.scala 96:19]
      alu_din_2 <= io.din_2 @[FU.scala 97:19]
    else :
      node _T_1 = eq(io.loop_source, UInt<2>("h1")) @[FU.scala 99:31]
      when _T_1 : @[FU.scala 99:44]
        node _T_2 = eq(loaded, UInt<1>("h0")) @[FU.scala 100:22]
        when _T_2 : @[FU.scala 100:31]
          alu_din_1 <= io.din_1 @[FU.scala 101:23]
          alu_din_2 <= io.din_2 @[FU.scala 102:23]
        else :
          alu_din_1 <= reg_dout @[FU.scala 106:23]
          alu_din_2 <= io.din_2 @[FU.scala 107:23]
      else :
        node _T_3 = eq(io.loop_source, UInt<2>("h2")) @[FU.scala 110:31]
        when _T_3 : @[FU.scala 110:44]
          node _T_4 = eq(loaded, UInt<1>("h0")) @[FU.scala 111:22]
          when _T_4 : @[FU.scala 111:31]
            alu_din_1 <= io.din_1 @[FU.scala 112:23]
            alu_din_2 <= io.din_2 @[FU.scala 113:23]
          else :
            alu_din_1 <= io.din_1 @[FU.scala 116:23]
            alu_din_2 <= reg_dout @[FU.scala 117:23]
        else :
          alu_din_1 <= asSInt(UInt<6>("h1f")) @[FU.scala 121:19]
          alu_din_2 <= asSInt(UInt<6>("h1f")) @[FU.scala 122:19]
    node _T_5 = eq(io.dout_r, UInt<1>("h1")) @[FU.scala 125:21]
    when _T_5 : @[FU.scala 125:30]
      valid <= UInt<1>("h0") @[FU.scala 126:15]
    node _T_6 = eq(io.din_v, UInt<1>("h1")) @[FU.scala 129:20]
    node _T_7 = eq(io.dout_r, UInt<1>("h1")) @[FU.scala 129:41]
    node _T_8 = and(_T_6, _T_7) @[FU.scala 129:28]
    node _T_9 = eq(io.loop_source, UInt<2>("h1")) @[FU.scala 130:29]
    node _T_10 = eq(io.loop_source, UInt<2>("h2")) @[FU.scala 130:59]
    node _T_11 = or(_T_9, _T_10) @[FU.scala 130:41]
    node _T_12 = and(_T_8, _T_11) @[FU.scala 129:49]
    when _T_12 : @[FU.scala 131:9]
      loaded <= UInt<1>("h1") @[FU.scala 132:16]
      node _count_T = add(count, UInt<1>("h1")) @[FU.scala 133:24]
      node _count_T_1 = tail(_count_T, 1) @[FU.scala 133:24]
      count <= _count_T_1 @[FU.scala 133:15]
    node _T_13 = sub(io.iterations_reset, UInt<1>("h1")) @[FU.scala 136:41]
    node _T_14 = tail(_T_13, 1) @[FU.scala 136:41]
    node _T_15 = eq(count, _T_14) @[FU.scala 136:17]
    node _T_16 = eq(io.loop_source, UInt<2>("h1")) @[FU.scala 137:29]
    node _T_17 = eq(io.loop_source, UInt<2>("h2")) @[FU.scala 137:59]
    node _T_18 = or(_T_16, _T_17) @[FU.scala 137:41]
    node _T_19 = and(_T_15, _T_18) @[FU.scala 136:47]
    node _T_20 = eq(io.dout_r, UInt<1>("h1")) @[FU.scala 138:23]
    node _T_21 = and(_T_19, _T_20) @[FU.scala 137:72]
    when _T_21 : @[FU.scala 139:9]
      count <= UInt<1>("h0") @[FU.scala 140:15]
      loaded <= UInt<1>("h0") @[FU.scala 141:16]
      valid <= UInt<1>("h1") @[FU.scala 142:15]
      reg_dout <= alu_dout @[FU.scala 143:18]
    else :
      node _T_22 = eq(io.loop_source, UInt<2>("h1")) @[FU.scala 145:32]
      node _T_23 = eq(io.loop_source, UInt<2>("h2")) @[FU.scala 145:62]
      node _T_24 = or(_T_22, _T_23) @[FU.scala 145:44]
      node _T_25 = eq(io.din_v, UInt<1>("h1")) @[FU.scala 146:26]
      node _T_26 = and(_T_24, _T_25) @[FU.scala 145:75]
      node _T_27 = eq(io.dout_r, UInt<1>("h1")) @[FU.scala 147:27]
      node _T_28 = and(_T_26, _T_27) @[FU.scala 146:34]
      when _T_28 : @[FU.scala 148:9]
        reg_dout <= alu_dout @[FU.scala 149:18]
    io.din_r <= io.dout_r @[FU.scala 152:14]
    node _T_29 = eq(io.loop_source, UInt<2>("h0")) @[FU.scala 154:26]
    when _T_29 : @[FU.scala 154:38]
      io.dout <= alu_dout @[FU.scala 155:17]
      io.dout_v <= io.din_v @[FU.scala 156:19]
    else :
      io.dout <= reg_dout @[FU.scala 159:17]
      io.dout_v <= valid @[FU.scala 160:19]

  module D_EB_2 :
    input clock : Clock
    input reset : Reset
    output io : { flip din : SInt<32>, flip din_v : UInt<1>, din_r : UInt<1>, dout : SInt<32>, dout_v : UInt<1>, flip dout_r : UInt<1>}

    reg reg_din_1 : SInt<32>, clock with :
      reset => (reset, asSInt(UInt<32>("h0"))) @[D_EB.scala 54:28]
    reg reg_din_2 : SInt<32>, clock with :
      reset => (reset, asSInt(UInt<32>("h0"))) @[D_EB.scala 55:28]
    reg reg_din_v_1 : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[D_EB.scala 56:30]
    reg reg_din_v_2 : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[D_EB.scala 57:30]
    reg reg_areg : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[D_EB.scala 58:27]
    when reg_areg : @[D_EB.scala 60:20]
      reg_din_1 <= io.din @[D_EB.scala 61:19]
      reg_din_2 <= reg_din_1 @[D_EB.scala 62:19]
      reg_din_v_1 <= io.din_v @[D_EB.scala 64:21]
      reg_din_v_2 <= reg_din_v_1 @[D_EB.scala 65:21]
    node _reg_areg_T = not(io.dout_v) @[D_EB.scala 68:17]
    node _reg_areg_T_1 = or(_reg_areg_T, io.dout_r) @[D_EB.scala 68:28]
    reg_areg <= _reg_areg_T_1 @[D_EB.scala 68:14]
    io.din_r <= reg_areg @[D_EB.scala 71:14]
    when reg_areg : @[D_EB.scala 73:20]
      io.dout <= reg_din_1 @[D_EB.scala 74:17]
      io.dout_v <= reg_din_v_1 @[D_EB.scala 75:19]
    else :
      io.dout <= reg_din_2 @[D_EB.scala 77:17]
      io.dout_v <= reg_din_v_2 @[D_EB.scala 78:19]

  module FS_4 :
    input clock : Clock
    input reset : Reset
    output io : { flip ready_out : UInt<5>, flip fork_mask : UInt<5>, ready_in : UInt<1>}

    wire aux : UInt<1>[5] @[FS.scala 51:19]
    wire temp : UInt<1>[5] @[FS.scala 52:20]
    node _aux_0_T = bits(io.fork_mask, 0, 0) @[FS.scala 55:34]
    node _aux_0_T_1 = not(_aux_0_T) @[FS.scala 55:21]
    node _aux_0_T_2 = bits(io.ready_out, 0, 0) @[FS.scala 55:53]
    node _aux_0_T_3 = or(_aux_0_T_1, _aux_0_T_2) @[FS.scala 55:39]
    node _aux_0_T_4 = bits(_aux_0_T_3, 0, 0) @[FS.scala 55:58]
    aux[0] <= _aux_0_T_4 @[FS.scala 55:16]
    node _aux_1_T = bits(io.fork_mask, 1, 1) @[FS.scala 55:34]
    node _aux_1_T_1 = not(_aux_1_T) @[FS.scala 55:21]
    node _aux_1_T_2 = bits(io.ready_out, 1, 1) @[FS.scala 55:53]
    node _aux_1_T_3 = or(_aux_1_T_1, _aux_1_T_2) @[FS.scala 55:39]
    node _aux_1_T_4 = bits(_aux_1_T_3, 0, 0) @[FS.scala 55:58]
    aux[1] <= _aux_1_T_4 @[FS.scala 55:16]
    node _aux_2_T = bits(io.fork_mask, 2, 2) @[FS.scala 55:34]
    node _aux_2_T_1 = not(_aux_2_T) @[FS.scala 55:21]
    node _aux_2_T_2 = bits(io.ready_out, 2, 2) @[FS.scala 55:53]
    node _aux_2_T_3 = or(_aux_2_T_1, _aux_2_T_2) @[FS.scala 55:39]
    node _aux_2_T_4 = bits(_aux_2_T_3, 0, 0) @[FS.scala 55:58]
    aux[2] <= _aux_2_T_4 @[FS.scala 55:16]
    node _aux_3_T = bits(io.fork_mask, 3, 3) @[FS.scala 55:34]
    node _aux_3_T_1 = not(_aux_3_T) @[FS.scala 55:21]
    node _aux_3_T_2 = bits(io.ready_out, 3, 3) @[FS.scala 55:53]
    node _aux_3_T_3 = or(_aux_3_T_1, _aux_3_T_2) @[FS.scala 55:39]
    node _aux_3_T_4 = bits(_aux_3_T_3, 0, 0) @[FS.scala 55:58]
    aux[3] <= _aux_3_T_4 @[FS.scala 55:16]
    node _aux_4_T = bits(io.fork_mask, 4, 4) @[FS.scala 55:34]
    node _aux_4_T_1 = not(_aux_4_T) @[FS.scala 55:21]
    node _aux_4_T_2 = bits(io.ready_out, 4, 4) @[FS.scala 55:53]
    node _aux_4_T_3 = or(_aux_4_T_1, _aux_4_T_2) @[FS.scala 55:39]
    node _aux_4_T_4 = bits(_aux_4_T_3, 0, 0) @[FS.scala 55:58]
    aux[4] <= _aux_4_T_4 @[FS.scala 55:16]
    temp[0] <= aux[0] @[FS.scala 58:13]
    node _temp_1_T = and(temp[0], aux[1]) @[FS.scala 61:30]
    temp[1] <= _temp_1_T @[FS.scala 61:17]
    node _temp_2_T = and(temp[1], aux[2]) @[FS.scala 61:30]
    temp[2] <= _temp_2_T @[FS.scala 61:17]
    node _temp_3_T = and(temp[2], aux[3]) @[FS.scala 61:30]
    temp[3] <= _temp_3_T @[FS.scala 61:17]
    node _temp_4_T = and(temp[3], aux[4]) @[FS.scala 61:30]
    temp[4] <= _temp_4_T @[FS.scala 61:17]
    io.ready_in <= temp[4] @[FS.scala 64:17]

  module CellProcessing :
    input clock : Clock
    input reset : Reset
    output io : { flip north_din : SInt<32>, flip north_din_v : UInt<1>, flip east_din : SInt<32>, flip east_din_v : UInt<1>, flip south_din : SInt<32>, flip south_din_v : UInt<1>, flip west_din : SInt<32>, flip west_din_v : UInt<1>, FU_din_1_r : UInt<1>, FU_din_2_r : UInt<1>, dout : SInt<32>, dout_v : UInt<1>, flip north_dout_r : UInt<1>, flip east_dout_r : UInt<1>, flip south_dout_r : UInt<1>, flip west_dout_r : UInt<1>, flip config_bits : UInt<182>}

    wire selector_mux_1 : UInt<3> @[CellProcessing.scala 72:30]
    wire selector_mux_2 : UInt<3> @[CellProcessing.scala 73:30]
    wire fork_receiver_mask_1 : UInt<4> @[CellProcessing.scala 74:36]
    wire fork_receiver_mask_2 : UInt<4> @[CellProcessing.scala 75:36]
    wire op_config : UInt<5> @[CellProcessing.scala 76:25]
    wire fork_sender_mask : UInt<5> @[CellProcessing.scala 77:32]
    wire I1_const : UInt<32> @[CellProcessing.scala 78:24]
    wire initial_value_load : UInt<32> @[CellProcessing.scala 79:34]
    wire iterations_reset_load : UInt<16> @[CellProcessing.scala 80:37]
    wire fifo_length_load : UInt<16> @[CellProcessing.scala 81:32]
    wire load_initial_value : UInt<2> @[CellProcessing.scala 82:34]
    wire FU_dout : SInt<32> @[CellProcessing.scala 105:23]
    wire EB_din_1 : SInt<32> @[CellProcessing.scala 107:24]
    wire EB_din_2 : SInt<32> @[CellProcessing.scala 108:24]
    wire join_din_1 : SInt<32> @[CellProcessing.scala 109:26]
    wire join_din_2 : SInt<32> @[CellProcessing.scala 110:26]
    wire join_dout_1 : SInt<32> @[CellProcessing.scala 127:27]
    wire join_dout_2 : SInt<32> @[CellProcessing.scala 128:27]
    wire FU_dout_v : UInt<1> @[CellProcessing.scala 131:25]
    wire FU_dout_r : UInt<1> @[CellProcessing.scala 133:25]
    wire EB_din_1_v : UInt<1> @[CellProcessing.scala 134:26]
    wire EB_din_2_v : UInt<1> @[CellProcessing.scala 135:26]
    wire join_din_1_v : UInt<1> @[CellProcessing.scala 139:28]
    wire join_din_1_r : UInt<1> @[CellProcessing.scala 141:28]
    wire join_din_2_v : UInt<1> @[CellProcessing.scala 145:28]
    wire join_din_2_r : UInt<1> @[CellProcessing.scala 146:28]
    wire join_dout_v : UInt<1> @[CellProcessing.scala 147:27]
    wire join_dout_r : UInt<1> @[CellProcessing.scala 148:27]
    wire forked_dout_r : UInt<1> @[CellProcessing.scala 149:29]
    node _selector_mux_1_T = bits(io.config_bits, 2, 0) @[CellProcessing.scala 152:37]
    selector_mux_1 <= _selector_mux_1_T @[CellProcessing.scala 152:20]
    node _selector_mux_2_T = bits(io.config_bits, 5, 3) @[CellProcessing.scala 153:37]
    selector_mux_2 <= _selector_mux_2_T @[CellProcessing.scala 153:20]
    node _fork_receiver_mask_1_T = bits(io.config_bits, 17, 14) @[CellProcessing.scala 154:43]
    fork_receiver_mask_1 <= _fork_receiver_mask_1_T @[CellProcessing.scala 154:26]
    node _fork_receiver_mask_2_T = bits(io.config_bits, 23, 20) @[CellProcessing.scala 156:43]
    fork_receiver_mask_2 <= _fork_receiver_mask_2_T @[CellProcessing.scala 156:26]
    node _op_config_T = bits(io.config_bits, 48, 44) @[CellProcessing.scala 158:32]
    op_config <= _op_config_T @[CellProcessing.scala 158:15]
    node _fork_sender_mask_T = bits(io.config_bits, 56, 52) @[CellProcessing.scala 160:39]
    fork_sender_mask <= _fork_sender_mask_T @[CellProcessing.scala 160:22]
    node _I1_const_T = bits(io.config_bits, 115, 84) @[CellProcessing.scala 162:32]
    I1_const <= _I1_const_T @[CellProcessing.scala 162:15]
    node _initial_value_load_T = bits(io.config_bits, 147, 116) @[CellProcessing.scala 163:41]
    initial_value_load <= _initial_value_load_T @[CellProcessing.scala 163:24]
    node _fifo_length_load_T = bits(io.config_bits, 163, 148) @[CellProcessing.scala 164:39]
    fifo_length_load <= _fifo_length_load_T @[CellProcessing.scala 164:22]
    node _iterations_reset_load_T = bits(io.config_bits, 179, 164) @[CellProcessing.scala 165:44]
    iterations_reset_load <= _iterations_reset_load_T @[CellProcessing.scala 165:27]
    node _load_initial_value_T = bits(io.config_bits, 181, 180) @[CellProcessing.scala 166:41]
    load_initial_value <= _load_initial_value_T @[CellProcessing.scala 166:24]
    inst FR_1 of FR_4 @[CellProcessing.scala 168:23]
    FR_1.clock <= clock
    FR_1.reset <= reset
    node ready_FR1_lo = cat(io.south_dout_r, io.west_dout_r) @[Cat.scala 31:58]
    node ready_FR1_hi = cat(io.north_dout_r, io.east_dout_r) @[Cat.scala 31:58]
    node ready_FR1 = cat(ready_FR1_hi, ready_FR1_lo) @[Cat.scala 31:58]
    node valid_in_FR1_lo_hi = cat(io.south_din_v, io.east_din_v) @[Cat.scala 31:58]
    node valid_in_FR1_lo = cat(valid_in_FR1_lo_hi, io.north_din_v) @[Cat.scala 31:58]
    node valid_in_FR1_hi_hi = cat(FU_dout_v, UInt<1>("h1")) @[Cat.scala 31:58]
    node valid_in_FR1_hi = cat(valid_in_FR1_hi_hi, io.west_din_v) @[Cat.scala 31:58]
    node valid_in_FR1 = cat(valid_in_FR1_hi, valid_in_FR1_lo) @[Cat.scala 31:58]
    FR_1.io.ready_out <= ready_FR1 @[CellProcessing.scala 171:23]
    FR_1.io.valid_in <= valid_in_FR1 @[CellProcessing.scala 172:22]
    FR_1.io.valid_mux_sel <= selector_mux_1 @[CellProcessing.scala 173:27]
    FR_1.io.fork_mask <= fork_receiver_mask_1 @[CellProcessing.scala 174:23]
    EB_din_1_v <= FR_1.io.valid_out @[CellProcessing.scala 175:16]
    inst MUX_1 of ConfMux_9 @[CellProcessing.scala 177:24]
    MUX_1.clock <= clock
    MUX_1.reset <= reset
    MUX_1.io.selector <= selector_mux_1 @[CellProcessing.scala 178:23]
    node MUX_1_io_mux_input_lo_lo = asUInt(io.north_din) @[Cat.scala 31:58]
    node MUX_1_io_mux_input_lo_hi_lo = asUInt(io.east_din) @[Cat.scala 31:58]
    node MUX_1_io_mux_input_lo_hi_hi = asUInt(io.south_din) @[Cat.scala 31:58]
    node MUX_1_io_mux_input_lo_hi = cat(MUX_1_io_mux_input_lo_hi_hi, MUX_1_io_mux_input_lo_hi_lo) @[Cat.scala 31:58]
    node MUX_1_io_mux_input_lo = cat(MUX_1_io_mux_input_lo_hi, MUX_1_io_mux_input_lo_lo) @[Cat.scala 31:58]
    node MUX_1_io_mux_input_hi_lo = asUInt(io.west_din) @[Cat.scala 31:58]
    node MUX_1_io_mux_input_hi_hi_hi = asUInt(FU_dout) @[Cat.scala 31:58]
    node MUX_1_io_mux_input_hi_hi = cat(MUX_1_io_mux_input_hi_hi_hi, I1_const) @[Cat.scala 31:58]
    node MUX_1_io_mux_input_hi = cat(MUX_1_io_mux_input_hi_hi, MUX_1_io_mux_input_hi_lo) @[Cat.scala 31:58]
    node _MUX_1_io_mux_input_T = cat(MUX_1_io_mux_input_hi, MUX_1_io_mux_input_lo) @[Cat.scala 31:58]
    node _MUX_1_io_mux_input_T_1 = asSInt(_MUX_1_io_mux_input_T) @[CellProcessing.scala 179:106]
    MUX_1.io.mux_input <= _MUX_1_io_mux_input_T_1 @[CellProcessing.scala 179:24]
    EB_din_1 <= MUX_1.io.mux_output @[CellProcessing.scala 183:14]
    inst FR_2 of FR_5 @[CellProcessing.scala 185:23]
    FR_2.clock <= clock
    FR_2.reset <= reset
    node ready_FR2_lo = cat(io.south_dout_r, io.west_dout_r) @[Cat.scala 31:58]
    node ready_FR2_hi = cat(io.north_dout_r, io.east_dout_r) @[Cat.scala 31:58]
    node ready_FR2 = cat(ready_FR2_hi, ready_FR2_lo) @[Cat.scala 31:58]
    node valid_in_FR2_lo_hi = cat(io.south_din_v, io.east_din_v) @[Cat.scala 31:58]
    node valid_in_FR2_lo = cat(valid_in_FR2_lo_hi, io.north_din_v) @[Cat.scala 31:58]
    node valid_in_FR2_hi_hi = cat(FU_dout_v, UInt<1>("h1")) @[Cat.scala 31:58]
    node valid_in_FR2_hi = cat(valid_in_FR2_hi_hi, io.west_din_v) @[Cat.scala 31:58]
    node valid_in_FR2 = cat(valid_in_FR2_hi, valid_in_FR2_lo) @[Cat.scala 31:58]
    FR_2.io.ready_out <= ready_FR2 @[CellProcessing.scala 188:23]
    FR_2.io.valid_in <= valid_in_FR2 @[CellProcessing.scala 189:22]
    FR_2.io.valid_mux_sel <= selector_mux_2 @[CellProcessing.scala 190:27]
    FR_2.io.fork_mask <= fork_receiver_mask_2 @[CellProcessing.scala 191:23]
    EB_din_2_v <= FR_2.io.valid_out @[CellProcessing.scala 192:16]
    inst MUX_2 of ConfMux_11 @[CellProcessing.scala 194:24]
    MUX_2.clock <= clock
    MUX_2.reset <= reset
    MUX_2.io.selector <= selector_mux_2 @[CellProcessing.scala 195:23]
    node MUX_2_io_mux_input_lo_lo = asUInt(io.north_din) @[Cat.scala 31:58]
    node MUX_2_io_mux_input_lo_hi_lo = asUInt(io.east_din) @[Cat.scala 31:58]
    node MUX_2_io_mux_input_lo_hi_hi = asUInt(io.south_din) @[Cat.scala 31:58]
    node MUX_2_io_mux_input_lo_hi = cat(MUX_2_io_mux_input_lo_hi_hi, MUX_2_io_mux_input_lo_hi_lo) @[Cat.scala 31:58]
    node MUX_2_io_mux_input_lo = cat(MUX_2_io_mux_input_lo_hi, MUX_2_io_mux_input_lo_lo) @[Cat.scala 31:58]
    node MUX_2_io_mux_input_hi_lo = asUInt(io.west_din) @[Cat.scala 31:58]
    node MUX_2_io_mux_input_hi_hi_hi = asUInt(FU_dout) @[Cat.scala 31:58]
    node MUX_2_io_mux_input_hi_hi = cat(MUX_2_io_mux_input_hi_hi_hi, I1_const) @[Cat.scala 31:58]
    node MUX_2_io_mux_input_hi = cat(MUX_2_io_mux_input_hi_hi, MUX_2_io_mux_input_hi_lo) @[Cat.scala 31:58]
    node _MUX_2_io_mux_input_T = cat(MUX_2_io_mux_input_hi, MUX_2_io_mux_input_lo) @[Cat.scala 31:58]
    node _MUX_2_io_mux_input_T_1 = asSInt(_MUX_2_io_mux_input_T) @[CellProcessing.scala 196:106]
    MUX_2.io.mux_input <= _MUX_2_io_mux_input_T_1 @[CellProcessing.scala 196:24]
    EB_din_2 <= MUX_2.io.mux_output @[CellProcessing.scala 200:14]
    inst EB_1 of D_EB @[CellProcessing.scala 202:23]
    EB_1.clock <= clock
    EB_1.reset <= reset
    EB_1.io.din <= EB_din_1 @[CellProcessing.scala 206:17]
    EB_1.io.din_v <= EB_din_1_v @[CellProcessing.scala 208:19]
    io.FU_din_1_r <= EB_1.io.din_r @[CellProcessing.scala 209:19]
    join_din_1 <= EB_1.io.dout @[CellProcessing.scala 214:16]
    join_din_1_v <= EB_1.io.dout_v @[CellProcessing.scala 215:18]
    EB_1.io.dout_r <= join_din_1_r @[CellProcessing.scala 216:20]
    inst EB_2 of D_EB_1 @[CellProcessing.scala 218:23]
    EB_2.clock <= clock
    EB_2.reset <= reset
    EB_2.io.din <= EB_din_2 @[CellProcessing.scala 222:17]
    EB_2.io.din <= MUX_2.io.mux_output @[CellProcessing.scala 223:17]
    EB_2.io.din_v <= EB_din_2_v @[CellProcessing.scala 224:19]
    io.FU_din_2_r <= EB_2.io.din_r @[CellProcessing.scala 225:19]
    join_din_2 <= EB_2.io.dout @[CellProcessing.scala 230:16]
    join_din_2_v <= EB_2.io.dout_v @[CellProcessing.scala 231:18]
    EB_2.io.dout_r <= join_din_2_r @[CellProcessing.scala 232:20]
    inst JOIN_INST of Join @[CellProcessing.scala 234:28]
    JOIN_INST.clock <= clock
    JOIN_INST.reset <= reset
    JOIN_INST.io.din_1 <= join_din_1 @[CellProcessing.scala 239:24]
    JOIN_INST.io.din_2 <= join_din_2 @[CellProcessing.scala 240:24]
    JOIN_INST.io.din_1 <= EB_1.io.dout @[CellProcessing.scala 241:24]
    JOIN_INST.io.din_2 <= EB_2.io.dout @[CellProcessing.scala 242:24]
    JOIN_INST.io.dout_r <= join_dout_r @[CellProcessing.scala 244:25]
    JOIN_INST.io.din_1_v <= join_din_1_v @[CellProcessing.scala 249:26]
    JOIN_INST.io.din_2_v <= join_din_2_v @[CellProcessing.scala 250:26]
    JOIN_INST.io.din_1_v <= EB_1.io.dout_v @[CellProcessing.scala 251:26]
    JOIN_INST.io.din_2_v <= EB_2.io.dout_v @[CellProcessing.scala 252:26]
    join_dout_v <= JOIN_INST.io.dout_v @[CellProcessing.scala 254:17]
    join_din_1_r <= JOIN_INST.io.din_1_r @[CellProcessing.scala 255:18]
    join_din_2_r <= JOIN_INST.io.din_2_r @[CellProcessing.scala 256:18]
    join_dout_1 <= JOIN_INST.io.dout_1 @[CellProcessing.scala 261:17]
    join_dout_2 <= JOIN_INST.io.dout_2 @[CellProcessing.scala 262:17]
    inst FU_INST of FU @[CellProcessing.scala 264:26]
    FU_INST.clock <= clock
    FU_INST.reset <= reset
    FU_INST.io.din_1 <= JOIN_INST.io.dout_1 @[CellProcessing.scala 265:22]
    FU_INST.io.din_2 <= JOIN_INST.io.dout_2 @[CellProcessing.scala 266:22]
    FU_INST.io.din_1 <= join_dout_1 @[CellProcessing.scala 271:22]
    FU_INST.io.din_2 <= join_dout_2 @[CellProcessing.scala 272:22]
    FU_INST.io.din_v <= join_dout_v @[CellProcessing.scala 273:22]
    join_dout_r <= FU_INST.io.din_r @[CellProcessing.scala 274:17]
    FU_INST.io.loop_source <= load_initial_value @[CellProcessing.scala 275:28]
    FU_INST.io.iterations_reset <= iterations_reset_load @[CellProcessing.scala 276:33]
    FU_INST.io.op_config <= op_config @[CellProcessing.scala 277:26]
    FU_dout <= FU_INST.io.dout @[CellProcessing.scala 279:13]
    FU_dout_v <= FU_INST.io.dout_v @[CellProcessing.scala 280:15]
    FU_INST.io.dout_r <= FU_dout_r @[CellProcessing.scala 282:23]
    inst EB_OUT of D_EB_2 @[CellProcessing.scala 284:25]
    EB_OUT.clock <= clock
    EB_OUT.reset <= reset
    EB_OUT.io.din <= FU_dout @[CellProcessing.scala 289:19]
    EB_OUT.io.din_v <= FU_dout_v @[CellProcessing.scala 290:21]
    EB_OUT.io.din <= FU_INST.io.dout @[CellProcessing.scala 291:19]
    EB_OUT.io.din_v <= FU_INST.io.dout_v @[CellProcessing.scala 292:21]
    FU_dout_r <= EB_OUT.io.din_r @[CellProcessing.scala 294:15]
    io.dout <= EB_OUT.io.dout @[CellProcessing.scala 295:13]
    io.dout_v <= EB_OUT.io.dout_v @[CellProcessing.scala 296:15]
    EB_OUT.io.dout_r <= forked_dout_r @[CellProcessing.scala 297:22]
    inst FS of FS_4 @[CellProcessing.scala 299:21]
    FS.clock <= clock
    FS.reset <= reset
    node ready_out_FS_lo = cat(io.south_dout_r, io.west_dout_r) @[Cat.scala 31:58]
    node ready_out_FS_hi_hi = cat(UInt<1>("h1"), io.north_dout_r) @[Cat.scala 31:58]
    node ready_out_FS_hi = cat(ready_out_FS_hi_hi, io.east_dout_r) @[Cat.scala 31:58]
    node ready_out_FS = cat(ready_out_FS_hi, ready_out_FS_lo) @[Cat.scala 31:58]
    FS.io.ready_out <= ready_out_FS @[CellProcessing.scala 301:21]
    forked_dout_r <= FS.io.ready_in @[CellProcessing.scala 302:19]
    FS.io.fork_mask <= fork_sender_mask @[CellProcessing.scala 303:21]

  module ProcessingElement :
    input clock : Clock
    input reset : UInt<1>
    output io : { flip north_din : SInt<32>, flip north_din_v : UInt<1>, north_din_r : UInt<1>, flip east_din : SInt<32>, flip east_din_v : UInt<1>, east_din_r : UInt<1>, flip south_din : SInt<32>, flip south_din_v : UInt<1>, south_din_r : UInt<1>, flip west_din : SInt<32>, flip west_din_v : UInt<1>, west_din_r : UInt<1>, north_dout : SInt<32>, north_dout_v : UInt<1>, flip north_dout_r : UInt<1>, east_dout : SInt<32>, east_dout_v : UInt<1>, flip east_dout_r : UInt<1>, south_dout : SInt<32>, south_dout_v : UInt<1>, flip south_dout_r : UInt<1>, west_dout : SInt<32>, west_dout_v : UInt<1>, flip west_dout_r : UInt<1>, flip config_bits : UInt<182>, flip catch_config : UInt<1>}

    wire mux_N_sel : UInt<2> @[ProcessingElement.scala 87:25]
    wire mux_E_sel : UInt<2> @[ProcessingElement.scala 88:25]
    wire mux_S_sel : UInt<2> @[ProcessingElement.scala 89:25]
    wire mux_W_sel : UInt<2> @[ProcessingElement.scala 90:25]
    wire accept_mask_frN : UInt<5> @[ProcessingElement.scala 91:31]
    wire accept_mask_frE : UInt<5> @[ProcessingElement.scala 92:31]
    wire accept_mask_frS : UInt<5> @[ProcessingElement.scala 93:31]
    wire accept_mask_frW : UInt<5> @[ProcessingElement.scala 94:31]
    wire accept_mask_fsiN : UInt<5> @[ProcessingElement.scala 95:32]
    wire accept_mask_fsiE : UInt<5> @[ProcessingElement.scala 96:32]
    wire accept_mask_fsiS : UInt<5> @[ProcessingElement.scala 97:32]
    wire accept_mask_fsiW : UInt<5> @[ProcessingElement.scala 98:32]
    reg config_bits_reg : UInt<182>, clock with :
      reset => (reset, UInt<182>("h0")) @[ProcessingElement.scala 99:34]
    wire north_buffer : SInt<32> @[ProcessingElement.scala 103:28]
    wire east_buffer : SInt<32> @[ProcessingElement.scala 104:27]
    wire south_buffer : SInt<32> @[ProcessingElement.scala 105:28]
    wire west_buffer : SInt<32> @[ProcessingElement.scala 106:27]
    wire north_buffer_v : UInt<1> @[ProcessingElement.scala 108:30]
    wire east_buffer_v : UInt<1> @[ProcessingElement.scala 109:29]
    wire south_buffer_v : UInt<1> @[ProcessingElement.scala 110:30]
    wire west_buffer_v : UInt<1> @[ProcessingElement.scala 111:29]
    wire north_buffer_r : UInt<1> @[ProcessingElement.scala 113:30]
    wire east_buffer_r : UInt<1> @[ProcessingElement.scala 114:29]
    wire south_buffer_r : UInt<1> @[ProcessingElement.scala 115:30]
    wire west_buffer_r : UInt<1> @[ProcessingElement.scala 116:29]
    wire north_REG_din : SInt<32> @[ProcessingElement.scala 118:29]
    wire east_REG_din : SInt<32> @[ProcessingElement.scala 119:28]
    wire south_REG_din : SInt<32> @[ProcessingElement.scala 120:29]
    wire west_REG_din : SInt<32> @[ProcessingElement.scala 121:28]
    wire north_REG_din_v : UInt<1> @[ProcessingElement.scala 123:31]
    wire east_REG_din_v : UInt<1> @[ProcessingElement.scala 124:30]
    wire south_REG_din_v : UInt<1> @[ProcessingElement.scala 125:31]
    wire west_REG_din_v : UInt<1> @[ProcessingElement.scala 126:30]
    wire north_REG_din_r : UInt<1> @[ProcessingElement.scala 128:31]
    wire east_REG_din_r : UInt<1> @[ProcessingElement.scala 129:30]
    wire south_REG_din_r : UInt<1> @[ProcessingElement.scala 130:31]
    wire west_REG_din_r : UInt<1> @[ProcessingElement.scala 131:30]
    wire FU_din_1_r : UInt<1> @[ProcessingElement.scala 133:26]
    wire FU_din_2_r : UInt<1> @[ProcessingElement.scala 134:26]
    wire FU_dout : SInt<32> @[ProcessingElement.scala 135:23]
    wire FU_dout_v : UInt<1> @[ProcessingElement.scala 136:25]
    when io.catch_config : @[ProcessingElement.scala 191:28]
      config_bits_reg <= io.config_bits @[ProcessingElement.scala 192:25]
    node _mux_N_sel_T = bits(config_bits_reg, 7, 6) @[ProcessingElement.scala 196:33]
    mux_N_sel <= _mux_N_sel_T @[ProcessingElement.scala 196:15]
    node _mux_E_sel_T = bits(config_bits_reg, 9, 8) @[ProcessingElement.scala 197:33]
    mux_E_sel <= _mux_E_sel_T @[ProcessingElement.scala 197:15]
    node _mux_S_sel_T = bits(config_bits_reg, 11, 10) @[ProcessingElement.scala 198:33]
    mux_S_sel <= _mux_S_sel_T @[ProcessingElement.scala 198:15]
    node _mux_W_sel_T = bits(config_bits_reg, 13, 12) @[ProcessingElement.scala 199:33]
    mux_W_sel <= _mux_W_sel_T @[ProcessingElement.scala 199:15]
    node _accept_mask_fsiN_T = bits(config_bits_reg, 28, 24) @[ProcessingElement.scala 201:40]
    accept_mask_fsiN <= _accept_mask_fsiN_T @[ProcessingElement.scala 201:22]
    node _accept_mask_fsiE_T = bits(config_bits_reg, 33, 29) @[ProcessingElement.scala 202:40]
    accept_mask_fsiE <= _accept_mask_fsiE_T @[ProcessingElement.scala 202:22]
    node _accept_mask_fsiS_T = bits(config_bits_reg, 38, 34) @[ProcessingElement.scala 203:40]
    accept_mask_fsiS <= _accept_mask_fsiS_T @[ProcessingElement.scala 203:22]
    node _accept_mask_fsiW_T = bits(config_bits_reg, 43, 39) @[ProcessingElement.scala 204:40]
    accept_mask_fsiW <= _accept_mask_fsiW_T @[ProcessingElement.scala 204:22]
    node _accept_mask_frN_T = bits(config_bits_reg, 61, 57) @[ProcessingElement.scala 206:39]
    accept_mask_frN <= _accept_mask_frN_T @[ProcessingElement.scala 206:21]
    node _accept_mask_frE_T = bits(config_bits_reg, 66, 62) @[ProcessingElement.scala 207:39]
    accept_mask_frE <= _accept_mask_frE_T @[ProcessingElement.scala 207:21]
    node _accept_mask_frS_T = bits(config_bits_reg, 71, 67) @[ProcessingElement.scala 208:39]
    accept_mask_frS <= _accept_mask_frS_T @[ProcessingElement.scala 208:21]
    node _accept_mask_frW_T = bits(config_bits_reg, 76, 72) @[ProcessingElement.scala 209:39]
    accept_mask_frW <= _accept_mask_frW_T @[ProcessingElement.scala 209:21]
    inst FIFO_Nin of D_FIFO @[ProcessingElement.scala 213:27]
    FIFO_Nin.clock <= clock
    FIFO_Nin.reset <= reset
    FIFO_Nin.io.din <= io.north_din @[ProcessingElement.scala 214:21]
    FIFO_Nin.io.din_v <= io.north_din_v @[ProcessingElement.scala 215:23]
    FIFO_Nin.io.dout_r <= north_buffer_r @[ProcessingElement.scala 216:24]
    io.north_din_r <= FIFO_Nin.io.din_r @[ProcessingElement.scala 217:20]
    north_buffer <= FIFO_Nin.io.dout @[ProcessingElement.scala 218:18]
    north_buffer_v <= FIFO_Nin.io.dout_v @[ProcessingElement.scala 219:20]
    inst FS_Nin of FS @[ProcessingElement.scala 221:25]
    FS_Nin.clock <= clock
    FS_Nin.reset <= reset
    node ready_out_FS_Nin_lo = cat(south_REG_din_r, west_REG_din_r) @[Cat.scala 31:58]
    node ready_out_FS_Nin_hi_hi = cat(FU_din_1_r, FU_din_2_r) @[Cat.scala 31:58]
    node ready_out_FS_Nin_hi = cat(ready_out_FS_Nin_hi_hi, east_REG_din_r) @[Cat.scala 31:58]
    node ready_out_FS_Nin = cat(ready_out_FS_Nin_hi, ready_out_FS_Nin_lo) @[Cat.scala 31:58]
    FS_Nin.io.ready_out <= ready_out_FS_Nin @[ProcessingElement.scala 223:25]
    north_buffer_r <= FS_Nin.io.ready_in @[ProcessingElement.scala 224:20]
    FS_Nin.io.fork_mask <= accept_mask_fsiN @[ProcessingElement.scala 225:25]
    inst MUX_Nout of ConfMux @[ProcessingElement.scala 227:28]
    MUX_Nout.clock <= clock
    MUX_Nout.reset <= reset
    MUX_Nout.io.selector <= mux_N_sel @[ProcessingElement.scala 228:26]
    node MUX_Nout_io_mux_input_lo_lo = asUInt(FU_dout) @[Cat.scala 31:58]
    node MUX_Nout_io_mux_input_lo_hi = asUInt(east_buffer) @[Cat.scala 31:58]
    node MUX_Nout_io_mux_input_lo = cat(MUX_Nout_io_mux_input_lo_hi, MUX_Nout_io_mux_input_lo_lo) @[Cat.scala 31:58]
    node MUX_Nout_io_mux_input_hi_lo = asUInt(south_buffer) @[Cat.scala 31:58]
    node MUX_Nout_io_mux_input_hi_hi = asUInt(west_buffer) @[Cat.scala 31:58]
    node MUX_Nout_io_mux_input_hi = cat(MUX_Nout_io_mux_input_hi_hi, MUX_Nout_io_mux_input_hi_lo) @[Cat.scala 31:58]
    node _MUX_Nout_io_mux_input_T = cat(MUX_Nout_io_mux_input_hi, MUX_Nout_io_mux_input_lo) @[Cat.scala 31:58]
    node _MUX_Nout_io_mux_input_T_1 = asSInt(_MUX_Nout_io_mux_input_T) @[ProcessingElement.scala 229:85]
    MUX_Nout.io.mux_input <= _MUX_Nout_io_mux_input_T_1 @[ProcessingElement.scala 229:27]
    north_REG_din <= MUX_Nout.io.mux_output @[ProcessingElement.scala 230:19]
    inst FR_Nout of FR @[ProcessingElement.scala 232:26]
    FR_Nout.clock <= clock
    FR_Nout.reset <= reset
    node ready_FR_Nout_lo = cat(south_REG_din_r, west_REG_din_r) @[Cat.scala 31:58]
    node ready_FR_Nout_hi_hi = cat(FU_din_1_r, FU_din_2_r) @[Cat.scala 31:58]
    node ready_FR_Nout_hi = cat(ready_FR_Nout_hi_hi, east_REG_din_r) @[Cat.scala 31:58]
    node ready_FR_Nout = cat(ready_FR_Nout_hi, ready_FR_Nout_lo) @[Cat.scala 31:58]
    node valid_in_FR_Nout_lo = cat(east_buffer_v, FU_dout_v) @[Cat.scala 31:58]
    node valid_in_FR_Nout_hi = cat(west_buffer_v, south_buffer_v) @[Cat.scala 31:58]
    node valid_in_FR_Nout = cat(valid_in_FR_Nout_hi, valid_in_FR_Nout_lo) @[Cat.scala 31:58]
    FR_Nout.io.ready_out <= ready_FR_Nout @[ProcessingElement.scala 235:26]
    FR_Nout.io.valid_in <= valid_in_FR_Nout @[ProcessingElement.scala 236:25]
    FR_Nout.io.valid_mux_sel <= mux_N_sel @[ProcessingElement.scala 237:30]
    FR_Nout.io.fork_mask <= accept_mask_frN @[ProcessingElement.scala 238:26]
    north_REG_din_v <= FR_Nout.io.valid_out @[ProcessingElement.scala 239:21]
    inst REG_Nout of D_REG @[ProcessingElement.scala 241:27]
    REG_Nout.clock <= clock
    REG_Nout.reset <= reset
    REG_Nout.io.din <= north_REG_din @[ProcessingElement.scala 243:21]
    REG_Nout.io.din_v <= north_REG_din_v @[ProcessingElement.scala 244:23]
    REG_Nout.io.dout_r <= io.north_dout_r @[ProcessingElement.scala 245:24]
    north_REG_din_r <= REG_Nout.io.din_r @[ProcessingElement.scala 247:21]
    io.north_dout <= REG_Nout.io.dout @[ProcessingElement.scala 248:19]
    io.north_dout_v <= REG_Nout.io.dout_v @[ProcessingElement.scala 249:21]
    inst FIFO_Ein of D_FIFO_1 @[ProcessingElement.scala 255:27]
    FIFO_Ein.clock <= clock
    FIFO_Ein.reset <= reset
    FIFO_Ein.io.din <= io.east_din @[ProcessingElement.scala 256:21]
    FIFO_Ein.io.din_v <= io.east_din_v @[ProcessingElement.scala 257:23]
    FIFO_Ein.io.dout_r <= east_buffer_r @[ProcessingElement.scala 258:24]
    io.east_din_r <= FIFO_Ein.io.din_r @[ProcessingElement.scala 259:19]
    east_buffer <= FIFO_Ein.io.dout @[ProcessingElement.scala 260:17]
    east_buffer_v <= FIFO_Ein.io.dout_v @[ProcessingElement.scala 261:19]
    inst FS_Ein of FS_1 @[ProcessingElement.scala 263:25]
    FS_Ein.clock <= clock
    FS_Ein.reset <= reset
    node ready_out_FS_Ein_lo = cat(south_REG_din_r, west_REG_din_r) @[Cat.scala 31:58]
    node ready_out_FS_Ein_hi_hi = cat(FU_din_1_r, FU_din_2_r) @[Cat.scala 31:58]
    node ready_out_FS_Ein_hi = cat(ready_out_FS_Ein_hi_hi, north_REG_din_r) @[Cat.scala 31:58]
    node ready_out_FS_Ein = cat(ready_out_FS_Ein_hi, ready_out_FS_Ein_lo) @[Cat.scala 31:58]
    FS_Ein.io.ready_out <= ready_out_FS_Ein @[ProcessingElement.scala 265:25]
    east_buffer_r <= FS_Ein.io.ready_in @[ProcessingElement.scala 266:19]
    FS_Ein.io.fork_mask <= accept_mask_fsiE @[ProcessingElement.scala 267:25]
    inst MUX_Eout of ConfMux_2 @[ProcessingElement.scala 269:28]
    MUX_Eout.clock <= clock
    MUX_Eout.reset <= reset
    MUX_Eout.io.selector <= mux_E_sel @[ProcessingElement.scala 270:26]
    node MUX_Eout_io_mux_input_lo_lo = asUInt(FU_dout) @[Cat.scala 31:58]
    node MUX_Eout_io_mux_input_lo_hi = asUInt(north_buffer) @[Cat.scala 31:58]
    node MUX_Eout_io_mux_input_lo = cat(MUX_Eout_io_mux_input_lo_hi, MUX_Eout_io_mux_input_lo_lo) @[Cat.scala 31:58]
    node MUX_Eout_io_mux_input_hi_lo = asUInt(south_buffer) @[Cat.scala 31:58]
    node MUX_Eout_io_mux_input_hi_hi = asUInt(west_buffer) @[Cat.scala 31:58]
    node MUX_Eout_io_mux_input_hi = cat(MUX_Eout_io_mux_input_hi_hi, MUX_Eout_io_mux_input_hi_lo) @[Cat.scala 31:58]
    node _MUX_Eout_io_mux_input_T = cat(MUX_Eout_io_mux_input_hi, MUX_Eout_io_mux_input_lo) @[Cat.scala 31:58]
    node _MUX_Eout_io_mux_input_T_1 = asSInt(_MUX_Eout_io_mux_input_T) @[ProcessingElement.scala 271:86]
    MUX_Eout.io.mux_input <= _MUX_Eout_io_mux_input_T_1 @[ProcessingElement.scala 271:27]
    east_REG_din <= MUX_Eout.io.mux_output @[ProcessingElement.scala 272:18]
    inst FR_Eout of FR_1 @[ProcessingElement.scala 274:26]
    FR_Eout.clock <= clock
    FR_Eout.reset <= reset
    node ready_FR_Eout_lo = cat(south_REG_din_r, west_REG_din_r) @[Cat.scala 31:58]
    node ready_FR_Eout_hi_hi = cat(FU_din_1_r, FU_din_2_r) @[Cat.scala 31:58]
    node ready_FR_Eout_hi = cat(ready_FR_Eout_hi_hi, north_REG_din_r) @[Cat.scala 31:58]
    node ready_FR_Eout = cat(ready_FR_Eout_hi, ready_FR_Eout_lo) @[Cat.scala 31:58]
    node valid_in_FR_Eout_lo = cat(north_buffer_v, FU_dout_v) @[Cat.scala 31:58]
    node valid_in_FR_Eout_hi = cat(west_buffer_v, south_buffer_v) @[Cat.scala 31:58]
    node valid_in_FR_Eout = cat(valid_in_FR_Eout_hi, valid_in_FR_Eout_lo) @[Cat.scala 31:58]
    FR_Eout.io.ready_out <= ready_FR_Eout @[ProcessingElement.scala 277:26]
    FR_Eout.io.valid_in <= valid_in_FR_Eout @[ProcessingElement.scala 278:25]
    FR_Eout.io.valid_mux_sel <= mux_E_sel @[ProcessingElement.scala 279:30]
    FR_Eout.io.fork_mask <= accept_mask_frE @[ProcessingElement.scala 280:26]
    east_REG_din_v <= FR_Eout.io.valid_out @[ProcessingElement.scala 281:20]
    inst REG_Eout of D_REG_1 @[ProcessingElement.scala 283:27]
    REG_Eout.clock <= clock
    REG_Eout.reset <= reset
    REG_Eout.io.din <= east_REG_din @[ProcessingElement.scala 285:21]
    REG_Eout.io.din_v <= east_REG_din_v @[ProcessingElement.scala 286:23]
    REG_Eout.io.dout_r <= io.east_dout_r @[ProcessingElement.scala 287:24]
    east_REG_din_r <= REG_Eout.io.din_r @[ProcessingElement.scala 289:20]
    io.east_dout <= REG_Eout.io.dout @[ProcessingElement.scala 290:18]
    io.east_dout_v <= REG_Eout.io.dout_v @[ProcessingElement.scala 291:20]
    inst FIFO_Sin of D_FIFO_2 @[ProcessingElement.scala 296:27]
    FIFO_Sin.clock <= clock
    FIFO_Sin.reset <= reset
    FIFO_Sin.io.din <= io.south_din @[ProcessingElement.scala 297:21]
    FIFO_Sin.io.din_v <= io.south_din_v @[ProcessingElement.scala 298:23]
    FIFO_Sin.io.dout_r <= south_buffer_r @[ProcessingElement.scala 299:24]
    io.south_din_r <= FIFO_Sin.io.din_r @[ProcessingElement.scala 300:20]
    south_buffer <= FIFO_Sin.io.dout @[ProcessingElement.scala 301:18]
    south_buffer_v <= FIFO_Sin.io.dout_v @[ProcessingElement.scala 302:20]
    inst FS_Sin of FS_2 @[ProcessingElement.scala 304:25]
    FS_Sin.clock <= clock
    FS_Sin.reset <= reset
    node ready_out_FS_Sin_lo = cat(east_REG_din_r, west_REG_din_r) @[Cat.scala 31:58]
    node ready_out_FS_Sin_hi_hi = cat(FU_din_1_r, FU_din_2_r) @[Cat.scala 31:58]
    node ready_out_FS_Sin_hi = cat(ready_out_FS_Sin_hi_hi, north_REG_din_r) @[Cat.scala 31:58]
    node ready_out_FS_Sin = cat(ready_out_FS_Sin_hi, ready_out_FS_Sin_lo) @[Cat.scala 31:58]
    FS_Sin.io.ready_out <= ready_out_FS_Sin @[ProcessingElement.scala 306:25]
    south_buffer_r <= FS_Sin.io.ready_in @[ProcessingElement.scala 307:20]
    FS_Sin.io.fork_mask <= accept_mask_fsiS @[ProcessingElement.scala 308:25]
    inst MUX_Sout of ConfMux_4 @[ProcessingElement.scala 310:28]
    MUX_Sout.clock <= clock
    MUX_Sout.reset <= reset
    MUX_Sout.io.selector <= mux_S_sel @[ProcessingElement.scala 311:26]
    node MUX_Sout_io_mux_input_lo_lo = asUInt(FU_dout) @[Cat.scala 31:58]
    node MUX_Sout_io_mux_input_lo_hi = asUInt(north_buffer) @[Cat.scala 31:58]
    node MUX_Sout_io_mux_input_lo = cat(MUX_Sout_io_mux_input_lo_hi, MUX_Sout_io_mux_input_lo_lo) @[Cat.scala 31:58]
    node MUX_Sout_io_mux_input_hi_lo = asUInt(east_buffer) @[Cat.scala 31:58]
    node MUX_Sout_io_mux_input_hi_hi = asUInt(west_buffer) @[Cat.scala 31:58]
    node MUX_Sout_io_mux_input_hi = cat(MUX_Sout_io_mux_input_hi_hi, MUX_Sout_io_mux_input_hi_lo) @[Cat.scala 31:58]
    node _MUX_Sout_io_mux_input_T = cat(MUX_Sout_io_mux_input_hi, MUX_Sout_io_mux_input_lo) @[Cat.scala 31:58]
    node _MUX_Sout_io_mux_input_T_1 = asSInt(_MUX_Sout_io_mux_input_T) @[ProcessingElement.scala 312:85]
    MUX_Sout.io.mux_input <= _MUX_Sout_io_mux_input_T_1 @[ProcessingElement.scala 312:27]
    south_REG_din <= MUX_Sout.io.mux_output @[ProcessingElement.scala 313:19]
    inst FR_Sout of FR_2 @[ProcessingElement.scala 315:26]
    FR_Sout.clock <= clock
    FR_Sout.reset <= reset
    node ready_FR_Sout_lo = cat(east_REG_din_r, west_REG_din_r) @[Cat.scala 31:58]
    node ready_FR_Sout_hi_hi = cat(FU_din_1_r, FU_din_2_r) @[Cat.scala 31:58]
    node ready_FR_Sout_hi = cat(ready_FR_Sout_hi_hi, north_REG_din_r) @[Cat.scala 31:58]
    node ready_FR_Sout = cat(ready_FR_Sout_hi, ready_FR_Sout_lo) @[Cat.scala 31:58]
    node valid_in_FR_Sout_lo = cat(north_buffer_v, FU_dout_v) @[Cat.scala 31:58]
    node valid_in_FR_Sout_hi = cat(west_buffer_v, east_buffer_v) @[Cat.scala 31:58]
    node valid_in_FR_Sout = cat(valid_in_FR_Sout_hi, valid_in_FR_Sout_lo) @[Cat.scala 31:58]
    FR_Sout.io.ready_out <= ready_FR_Sout @[ProcessingElement.scala 318:26]
    FR_Sout.io.valid_in <= valid_in_FR_Sout @[ProcessingElement.scala 319:25]
    FR_Sout.io.valid_mux_sel <= mux_S_sel @[ProcessingElement.scala 320:30]
    FR_Sout.io.fork_mask <= accept_mask_frS @[ProcessingElement.scala 321:26]
    south_REG_din_v <= FR_Sout.io.valid_out @[ProcessingElement.scala 322:21]
    inst REG_Sout of D_REG_2 @[ProcessingElement.scala 324:27]
    REG_Sout.clock <= clock
    REG_Sout.reset <= reset
    REG_Sout.io.din <= south_REG_din @[ProcessingElement.scala 326:21]
    REG_Sout.io.din_v <= south_REG_din_v @[ProcessingElement.scala 327:23]
    REG_Sout.io.dout_r <= io.south_dout_r @[ProcessingElement.scala 328:24]
    south_REG_din_r <= REG_Sout.io.din_r @[ProcessingElement.scala 330:21]
    io.south_dout <= REG_Sout.io.dout @[ProcessingElement.scala 331:19]
    io.south_dout_v <= REG_Sout.io.dout_v @[ProcessingElement.scala 332:21]
    inst FIFO_Win of D_FIFO_3 @[ProcessingElement.scala 337:27]
    FIFO_Win.clock <= clock
    FIFO_Win.reset <= reset
    FIFO_Win.io.din <= io.west_din @[ProcessingElement.scala 338:21]
    FIFO_Win.io.din_v <= io.west_din_v @[ProcessingElement.scala 339:23]
    FIFO_Win.io.dout_r <= west_buffer_r @[ProcessingElement.scala 340:24]
    io.west_din_r <= FIFO_Win.io.din_r @[ProcessingElement.scala 341:19]
    west_buffer <= FIFO_Win.io.dout @[ProcessingElement.scala 342:17]
    west_buffer_v <= FIFO_Win.io.dout_v @[ProcessingElement.scala 343:19]
    inst FS_Win of FS_3 @[ProcessingElement.scala 345:25]
    FS_Win.clock <= clock
    FS_Win.reset <= reset
    node ready_out_FS_Win_lo = cat(east_REG_din_r, south_REG_din_r) @[Cat.scala 31:58]
    node ready_out_FS_Win_hi_hi = cat(FU_din_1_r, FU_din_2_r) @[Cat.scala 31:58]
    node ready_out_FS_Win_hi = cat(ready_out_FS_Win_hi_hi, north_REG_din_r) @[Cat.scala 31:58]
    node ready_out_FS_Win = cat(ready_out_FS_Win_hi, ready_out_FS_Win_lo) @[Cat.scala 31:58]
    FS_Win.io.ready_out <= ready_out_FS_Win @[ProcessingElement.scala 347:25]
    FS_Win.io.fork_mask <= accept_mask_fsiW @[ProcessingElement.scala 348:25]
    west_buffer_r <= FS_Win.io.ready_in @[ProcessingElement.scala 349:19]
    inst MUX_Wout of ConfMux_6 @[ProcessingElement.scala 352:28]
    MUX_Wout.clock <= clock
    MUX_Wout.reset <= reset
    MUX_Wout.io.selector <= mux_W_sel @[ProcessingElement.scala 353:26]
    node MUX_Wout_io_mux_input_lo_lo = asUInt(FU_dout) @[Cat.scala 31:58]
    node MUX_Wout_io_mux_input_lo_hi = asUInt(north_buffer) @[Cat.scala 31:58]
    node MUX_Wout_io_mux_input_lo = cat(MUX_Wout_io_mux_input_lo_hi, MUX_Wout_io_mux_input_lo_lo) @[Cat.scala 31:58]
    node MUX_Wout_io_mux_input_hi_lo = asUInt(east_buffer) @[Cat.scala 31:58]
    node MUX_Wout_io_mux_input_hi_hi = asUInt(south_buffer) @[Cat.scala 31:58]
    node MUX_Wout_io_mux_input_hi = cat(MUX_Wout_io_mux_input_hi_hi, MUX_Wout_io_mux_input_hi_lo) @[Cat.scala 31:58]
    node _MUX_Wout_io_mux_input_T = cat(MUX_Wout_io_mux_input_hi, MUX_Wout_io_mux_input_lo) @[Cat.scala 31:58]
    node _MUX_Wout_io_mux_input_T_1 = asSInt(_MUX_Wout_io_mux_input_T) @[ProcessingElement.scala 354:86]
    MUX_Wout.io.mux_input <= _MUX_Wout_io_mux_input_T_1 @[ProcessingElement.scala 354:27]
    west_REG_din <= MUX_Wout.io.mux_output @[ProcessingElement.scala 355:18]
    inst FR_Wout of FR_3 @[ProcessingElement.scala 357:26]
    FR_Wout.clock <= clock
    FR_Wout.reset <= reset
    node ready_FR_Wout_lo = cat(east_REG_din_r, south_REG_din_r) @[Cat.scala 31:58]
    node ready_FR_Wout_hi_hi = cat(FU_din_1_r, FU_din_2_r) @[Cat.scala 31:58]
    node ready_FR_Wout_hi = cat(ready_FR_Wout_hi_hi, north_REG_din_r) @[Cat.scala 31:58]
    node ready_FR_Wout = cat(ready_FR_Wout_hi, ready_FR_Wout_lo) @[Cat.scala 31:58]
    node valid_in_FR_Wout_lo = cat(north_buffer_v, FU_dout_v) @[Cat.scala 31:58]
    node valid_in_FR_Wout_hi = cat(south_buffer_v, east_buffer_v) @[Cat.scala 31:58]
    node valid_in_FR_Wout = cat(valid_in_FR_Wout_hi, valid_in_FR_Wout_lo) @[Cat.scala 31:58]
    FR_Wout.io.ready_out <= ready_FR_Wout @[ProcessingElement.scala 360:26]
    FR_Wout.io.valid_in <= valid_in_FR_Wout @[ProcessingElement.scala 361:25]
    FR_Wout.io.valid_mux_sel <= mux_W_sel @[ProcessingElement.scala 362:30]
    FR_Wout.io.fork_mask <= accept_mask_frW @[ProcessingElement.scala 363:26]
    west_REG_din_v <= FR_Wout.io.valid_out @[ProcessingElement.scala 364:20]
    inst REG_Wout of D_REG_3 @[ProcessingElement.scala 366:27]
    REG_Wout.clock <= clock
    REG_Wout.reset <= reset
    REG_Wout.io.din <= west_REG_din @[ProcessingElement.scala 368:21]
    REG_Wout.io.din_v <= west_REG_din_v @[ProcessingElement.scala 369:23]
    REG_Wout.io.dout_r <= io.west_dout_r @[ProcessingElement.scala 370:24]
    west_REG_din_r <= REG_Wout.io.din_r @[ProcessingElement.scala 372:20]
    io.west_dout <= REG_Wout.io.dout @[ProcessingElement.scala 373:18]
    io.west_dout_v <= REG_Wout.io.dout_v @[ProcessingElement.scala 374:20]
    inst CELL of CellProcessing @[ProcessingElement.scala 378:23]
    CELL.clock <= clock
    CELL.reset <= reset
    CELL.io.north_din <= north_buffer @[ProcessingElement.scala 379:23]
    CELL.io.north_din_v <= north_buffer_v @[ProcessingElement.scala 380:25]
    CELL.io.east_din <= east_buffer @[ProcessingElement.scala 381:22]
    CELL.io.east_din_v <= east_buffer_v @[ProcessingElement.scala 382:24]
    CELL.io.south_din <= south_buffer @[ProcessingElement.scala 383:23]
    CELL.io.south_din_v <= south_buffer_v @[ProcessingElement.scala 384:25]
    CELL.io.west_din <= west_buffer @[ProcessingElement.scala 385:22]
    CELL.io.west_din_v <= west_buffer_v @[ProcessingElement.scala 386:24]
    CELL.io.north_dout_r <= north_REG_din_r @[ProcessingElement.scala 387:26]
    CELL.io.east_dout_r <= east_REG_din_r @[ProcessingElement.scala 388:25]
    CELL.io.south_dout_r <= south_REG_din_r @[ProcessingElement.scala 389:26]
    CELL.io.west_dout_r <= west_REG_din_r @[ProcessingElement.scala 390:25]
    CELL.io.config_bits <= config_bits_reg @[ProcessingElement.scala 391:25]
    FU_din_1_r <= CELL.io.FU_din_1_r @[ProcessingElement.scala 393:16]
    FU_din_2_r <= CELL.io.FU_din_2_r @[ProcessingElement.scala 394:16]
    FU_dout <= CELL.io.dout @[ProcessingElement.scala 395:13]
    FU_dout_v <= CELL.io.dout_v @[ProcessingElement.scala 396:15]

