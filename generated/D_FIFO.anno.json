[
  {
    "class":"firrtl.EmitCircuitAnnotation",
    "emitter":"firrtl.VerilogEmitter"
  },
  {
    "class":"firrtl.transforms.BlackBoxInlineAnno",
    "target":"D_FIFO.D_FIFO_V",
    "name":"D_FIFO_V.v",
    "text":"// Original \n\nmodule D_FIFO_V\n    \n    #(parameter DATA_WIDTH = 32, FIFO_DEPTH = 32)\n    \n    (\n    input                       clock,\n    input                       reset,\n    input  [(DATA_WIDTH -1):0]    din,\n    input                       din_v,\n    input                       dout_r,\n    output                      din_r,\n    output reg [(DATA_WIDTH-1):0] dout,\n    output reg dout_v\n    );\n        \n    reg [0:DATA_WIDTH-1] memory [FIFO_DEPTH-1:0];\n\n    reg [4:0] write_pointer = 5'b0;\n    reg [4:0] read_pointer = 5'b0;\n    integer num_data = 0;\n\n    reg full;\t\n    reg empty;\n    wire rd_en;\n    wire wr_en;\n\n    \n    always @(posedge clock) begin\n        if (reset) begin \n            empty <= 1'b1;\n            full  <= 1'b0;\n            write_pointer = 5'b0;\n            read_pointer = 5'b0;\n            num_data = 0;\n            dout <= 32'b0;\n            dout_v <= 1'b0;\t\n        end \n\n        if  (dout_r)\n            dout_v <= 1'b0;\n\n        if (~full & wr_en) begin \n            memory[write_pointer] <= din;\n            num_data = num_data + 1;\n                    \n            if (write_pointer == FIFO_DEPTH) \n                write_pointer = 5'b0;\n            else\n                write_pointer = write_pointer + 1;     \n        end\n        \n        if (~empty & rd_en) begin\n            \n            dout <= memory[read_pointer];\n            dout_v <= 1'b1;\n            num_data = num_data - 1;\n\n            if (read_pointer == FIFO_DEPTH) \n                read_pointer = 0;\n            else\n                read_pointer = read_pointer + 1; \n            \n        end\n\n        if (num_data == FIFO_DEPTH-1)\n            full <= 1'b1;\n        else\n            full <= 1'b0;\n                    \n        if (num_data == 0) \n            empty <= 1'b1;\n        else\n            empty <= 1'b0;\n    end \n\nassign wr_en = din_v & (~full);\nassign rd_en = dout_r & (~empty);\nassign din_r = (~full);\n\nendmodule\n"
  },
  {
    "class":"firrtl.transforms.BlackBoxTargetDirAnno",
    "targetDir":"generated"
  }
]