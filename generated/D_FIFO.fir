circuit D_FIFO :
  module D_FIFO :
    input clock : Clock
    input reset : UInt<1>
    output io : { flip din : UInt<32>, flip din_v : UInt<1>, flip dout_r : UInt<1>, din_r : UInt<1>, dout : UInt<32>, dout_v : UInt<1>}

    smem memory : UInt<32> [4] @[D_FIFO.scala 17:29]
    reg write_pointer : UInt<4>, clock with :
      reset => (reset, UInt<4>("h0")) @[D_FIFO.scala 19:36]
    reg read_pointer : UInt<4>, clock with :
      reset => (reset, UInt<4>("h0")) @[D_FIFO.scala 20:31]
    reg num_data : UInt<4>, clock with :
      reset => (reset, UInt<4>("h0")) @[D_FIFO.scala 21:27]
    wire full : UInt<1> @[D_FIFO.scala 24:20]
    wire empty : UInt<1> @[D_FIFO.scala 25:21]
    wire rd_en : UInt<1> @[D_FIFO.scala 26:21]
    wire wr_en : UInt<1> @[D_FIFO.scala 27:21]
    empty <= UInt<1>("h1") @[D_FIFO.scala 29:11]
    full <= UInt<1>("h0") @[D_FIFO.scala 30:14]
    write_pointer <= UInt<1>("h0") @[D_FIFO.scala 31:23]
    read_pointer <= UInt<1>("h0") @[D_FIFO.scala 32:18]
    num_data <= UInt<1>("h0") @[D_FIFO.scala 33:18]
    io.dout <= UInt<1>("h0") @[D_FIFO.scala 34:13]
    io.dout_v <= UInt<1>("h0") @[D_FIFO.scala 35:19]
    when io.dout_r : @[D_FIFO.scala 37:22]
      io.dout_v <= UInt<1>("h0") @[D_FIFO.scala 38:19]
    node _T = eq(full, UInt<1>("h0")) @[D_FIFO.scala 41:16]
    node _T_1 = eq(wr_en, UInt<1>("h1")) @[D_FIFO.scala 41:38]
    node _T_2 = and(_T, _T_1) @[D_FIFO.scala 41:29]
    when _T_2 : @[D_FIFO.scala 41:50]
      node _T_3 = bits(write_pointer, 1, 0) @[D_FIFO.scala 42:15]
      infer mport MPORT = memory[_T_3], clock @[D_FIFO.scala 42:15]
      MPORT <= io.din @[D_FIFO.scala 42:31]
      node _num_data_T = add(num_data, UInt<1>("h1")) @[D_FIFO.scala 43:30]
      node _num_data_T_1 = tail(_num_data_T, 1) @[D_FIFO.scala 43:30]
      num_data <= _num_data_T_1 @[D_FIFO.scala 43:18]
      node _T_4 = sub(UInt<3>("h4"), UInt<1>("h1")) @[D_FIFO.scala 45:46]
      node _T_5 = tail(_T_4, 1) @[D_FIFO.scala 45:46]
      node _T_6 = eq(write_pointer, _T_5) @[D_FIFO.scala 45:29]
      when _T_6 : @[D_FIFO.scala 45:54]
        write_pointer <= UInt<1>("h0") @[D_FIFO.scala 46:27]
      else :
        node _write_pointer_T = add(write_pointer, UInt<1>("h1")) @[D_FIFO.scala 48:44]
        node _write_pointer_T_1 = tail(_write_pointer_T, 1) @[D_FIFO.scala 48:44]
        write_pointer <= _write_pointer_T_1 @[D_FIFO.scala 48:27]
    node _T_7 = eq(empty, UInt<1>("h0")) @[D_FIFO.scala 52:17]
    node _T_8 = eq(rd_en, UInt<1>("h1")) @[D_FIFO.scala 52:39]
    node _T_9 = and(_T_7, _T_8) @[D_FIFO.scala 52:30]
    when _T_9 : @[D_FIFO.scala 52:51]
      node _io_dout_T = bits(read_pointer, 1, 0) @[D_FIFO.scala 53:26]
      infer mport io_dout_MPORT = memory[_io_dout_T], clock @[D_FIFO.scala 53:26]
      io.dout <= io_dout_MPORT @[D_FIFO.scala 53:17]
      io.dout_v <= UInt<1>("h1") @[D_FIFO.scala 54:19]
      node _num_data_T_2 = sub(num_data, UInt<1>("h1")) @[D_FIFO.scala 55:30]
      node _num_data_T_3 = tail(_num_data_T_2, 1) @[D_FIFO.scala 55:30]
      num_data <= _num_data_T_3 @[D_FIFO.scala 55:18]
      node _T_10 = sub(UInt<3>("h4"), UInt<1>("h1")) @[D_FIFO.scala 57:45]
      node _T_11 = tail(_T_10, 1) @[D_FIFO.scala 57:45]
      node _T_12 = eq(read_pointer, _T_11) @[D_FIFO.scala 57:28]
      when _T_12 : @[D_FIFO.scala 57:53]
        read_pointer <= UInt<1>("h0") @[D_FIFO.scala 58:26]
      else :
        node _read_pointer_T = add(read_pointer, UInt<1>("h1")) @[D_FIFO.scala 60:42]
        node _read_pointer_T_1 = tail(_read_pointer_T, 1) @[D_FIFO.scala 60:42]
        read_pointer <= _read_pointer_T_1 @[D_FIFO.scala 60:26]
    node _T_13 = eq(num_data, UInt<3>("h4")) @[D_FIFO.scala 64:20]
    when _T_13 : @[D_FIFO.scala 64:39]
      full <= UInt<1>("h1") @[D_FIFO.scala 65:14]
    else :
      full <= UInt<1>("h0") @[D_FIFO.scala 67:14]
    node _T_14 = eq(num_data, UInt<1>("h0")) @[D_FIFO.scala 70:20]
    when _T_14 : @[D_FIFO.scala 70:30]
      empty <= UInt<1>("h1") @[D_FIFO.scala 71:15]
    else :
      empty <= UInt<1>("h0") @[D_FIFO.scala 73:15]
    node _wr_en_T = not(full) @[D_FIFO.scala 76:26]
    node _wr_en_T_1 = and(io.din_v, _wr_en_T) @[D_FIFO.scala 76:23]
    wr_en <= _wr_en_T_1 @[D_FIFO.scala 76:11]
    node _rd_en_T = not(empty) @[D_FIFO.scala 77:31]
    node _rd_en_T_1 = and(io.dout_r, _rd_en_T) @[D_FIFO.scala 77:28]
    rd_en <= _rd_en_T_1 @[D_FIFO.scala 77:15]
    node _io_din_r_T = not(full) @[D_FIFO.scala 78:22]
    io.din_r <= _io_din_r_T @[D_FIFO.scala 78:18]

