circuit D_FIFO :
  module D_FIFO :
    input clock : Clock
    input reset : UInt<1>
    output io : { flip din : UInt<32>, flip din_v : UInt<1>, flip dout_r : UInt<1>, din_r : UInt<1>, dout : UInt<32>, dout_v : UInt<1>}

    smem memory : UInt<32> [32] @[D_FIFO.scala 55:29]
    reg write_pointer : UInt<5>, clock with :
      reset => (reset, UInt<5>("h0")) @[D_FIFO.scala 58:32]
    reg read_pointer : UInt<5>, clock with :
      reset => (reset, UInt<5>("h0")) @[D_FIFO.scala 59:31]
    reg num_data : UInt<5>, clock with :
      reset => (reset, UInt<5>("h0")) @[D_FIFO.scala 60:27]
    wire full : UInt<1> @[D_FIFO.scala 62:20]
    wire empty : UInt<1> @[D_FIFO.scala 63:21]
    wire rd_en : UInt<1> @[D_FIFO.scala 64:21]
    wire wr_en : UInt<1> @[D_FIFO.scala 65:21]
    empty <= UInt<1>("h1") @[D_FIFO.scala 68:11]
    full <= UInt<1>("h0") @[D_FIFO.scala 69:10]
    io.dout <= UInt<1>("h0") @[D_FIFO.scala 70:13]
    io.dout_v <= UInt<1>("h0") @[D_FIFO.scala 71:15]
    when io.dout_r : @[D_FIFO.scala 73:22]
      io.dout_v <= UInt<1>("h0") @[D_FIFO.scala 74:19]
    node _T = eq(empty, UInt<1>("h0")) @[D_FIFO.scala 78:16]
    node _T_1 = eq(rd_en, UInt<1>("h1")) @[D_FIFO.scala 78:38]
    node _T_2 = and(_T, _T_1) @[D_FIFO.scala 78:29]
    when _T_2 : @[D_FIFO.scala 78:49]
      infer mport io_dout_MPORT = memory[read_pointer], clock @[D_FIFO.scala 79:26]
      io.dout <= io_dout_MPORT @[D_FIFO.scala 79:17]
      io.dout_v <= UInt<1>("h1") @[D_FIFO.scala 80:19]
      node _num_data_T = sub(num_data, UInt<1>("h1")) @[D_FIFO.scala 81:30]
      node _num_data_T_1 = tail(_num_data_T, 1) @[D_FIFO.scala 81:30]
      num_data <= _num_data_T_1 @[D_FIFO.scala 81:18]
      node _T_3 = sub(UInt<6>("h20"), UInt<1>("h1")) @[D_FIFO.scala 83:45]
      node _T_4 = tail(_T_3, 1) @[D_FIFO.scala 83:45]
      node _T_5 = eq(read_pointer, _T_4) @[D_FIFO.scala 83:28]
      when _T_5 : @[D_FIFO.scala 83:53]
        read_pointer <= UInt<1>("h0") @[D_FIFO.scala 84:26]
      else :
        node _read_pointer_T = add(read_pointer, UInt<1>("h1")) @[D_FIFO.scala 86:42]
        node _read_pointer_T_1 = tail(_read_pointer_T, 1) @[D_FIFO.scala 86:42]
        read_pointer <= _read_pointer_T_1 @[D_FIFO.scala 86:26]
    node _T_6 = eq(full, UInt<1>("h0")) @[D_FIFO.scala 90:15]
    node _T_7 = eq(wr_en, UInt<1>("h1")) @[D_FIFO.scala 90:37]
    node _T_8 = and(_T_6, _T_7) @[D_FIFO.scala 90:28]
    when _T_8 : @[D_FIFO.scala 90:48]
      infer mport MPORT = memory[write_pointer], clock @[D_FIFO.scala 92:15]
      MPORT <= io.din @[D_FIFO.scala 92:31]
      node _num_data_T_2 = add(num_data, UInt<1>("h1")) @[D_FIFO.scala 93:30]
      node _num_data_T_3 = tail(_num_data_T_2, 1) @[D_FIFO.scala 93:30]
      num_data <= _num_data_T_3 @[D_FIFO.scala 93:18]
      node _T_9 = sub(UInt<6>("h20"), UInt<1>("h1")) @[D_FIFO.scala 95:46]
      node _T_10 = tail(_T_9, 1) @[D_FIFO.scala 95:46]
      node _T_11 = eq(write_pointer, _T_10) @[D_FIFO.scala 95:29]
      when _T_11 : @[D_FIFO.scala 95:54]
        write_pointer <= UInt<1>("h0") @[D_FIFO.scala 96:27]
      else :
        node _write_pointer_T = add(write_pointer, UInt<1>("h1")) @[D_FIFO.scala 98:44]
        node _write_pointer_T_1 = tail(_write_pointer_T, 1) @[D_FIFO.scala 98:44]
        write_pointer <= _write_pointer_T_1 @[D_FIFO.scala 98:27]
    node _T_12 = eq(num_data, UInt<6>("h20")) @[D_FIFO.scala 102:20]
    when _T_12 : @[D_FIFO.scala 102:39]
      full <= UInt<1>("h1") @[D_FIFO.scala 103:14]
    else :
      full <= UInt<1>("h0") @[D_FIFO.scala 105:14]
    node _T_13 = eq(num_data, UInt<1>("h0")) @[D_FIFO.scala 108:20]
    when _T_13 : @[D_FIFO.scala 108:30]
      empty <= UInt<1>("h1") @[D_FIFO.scala 109:15]
    else :
      empty <= UInt<1>("h0") @[D_FIFO.scala 111:15]
    node _wr_en_T = not(full) @[D_FIFO.scala 114:26]
    node _wr_en_T_1 = and(io.din_v, _wr_en_T) @[D_FIFO.scala 114:23]
    wr_en <= _wr_en_T_1 @[D_FIFO.scala 114:11]
    node _rd_en_T = not(empty) @[D_FIFO.scala 115:27]
    node _rd_en_T_1 = and(io.dout_r, _rd_en_T) @[D_FIFO.scala 115:24]
    rd_en <= _rd_en_T_1 @[D_FIFO.scala 115:11]
    node _io_din_r_T = not(full) @[D_FIFO.scala 116:18]
    io.din_r <= _io_din_r_T @[D_FIFO.scala 116:14]

