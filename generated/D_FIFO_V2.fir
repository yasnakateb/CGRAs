circuit D_FIFO_V2 :
  module D_FIFO_V2 :
    input clock : Clock
    input reset : UInt<1>
    output io : { flip din : UInt<32>, flip din_v : UInt<1>, flip dout_r : UInt<1>, din_r : UInt<1>, dout : UInt<32>, dout_v : UInt<1>}

    cmem memory : UInt<32> [32] @[D_FIFO_V2.scala 55:21]
    wire mem_r_en : UInt<1> @[D_FIFO_V2.scala 57:24]
    wire mem_w_en : UInt<1> @[D_FIFO_V2.scala 58:24]
    wire cnt_w_en : UInt<1> @[D_FIFO_V2.scala 61:24]
    wire cnt_r_en : UInt<1> @[D_FIFO_V2.scala 62:24]
    reg dout_v : UInt, clock with :
      reset => (UInt<1>("h0"), dout_v) @[D_FIFO_V2.scala 65:25]
    dout_v <= UInt<1>("h0") @[D_FIFO_V2.scala 65:25]
    wire full : UInt<1> @[D_FIFO_V2.scala 68:20]
    wire empty : UInt<1> @[D_FIFO_V2.scala 71:21]
    reg cnt_w : UInt<32>, clock with :
      reset => (reset, UInt<32>("h0")) @[D_FIFO_V2.scala 73:24]
    reg cnt_r : UInt<32>, clock with :
      reset => (reset, UInt<32>("h0")) @[D_FIFO_V2.scala 74:24]
    reg cnt_data : UInt<32>, clock with :
      reset => (reset, UInt<32>("h0")) @[D_FIFO_V2.scala 75:27]
    node _mem_w_en_T = not(full) @[D_FIFO_V2.scala 78:29]
    node _mem_w_en_T_1 = and(io.din_v, _mem_w_en_T) @[D_FIFO_V2.scala 78:26]
    mem_w_en <= _mem_w_en_T_1 @[D_FIFO_V2.scala 78:14]
    node _mem_r_en_T = not(empty) @[D_FIFO_V2.scala 80:30]
    node _mem_r_en_T_1 = and(io.dout_r, _mem_r_en_T) @[D_FIFO_V2.scala 80:27]
    mem_r_en <= _mem_r_en_T_1 @[D_FIFO_V2.scala 80:14]
    cnt_w_en <= mem_r_en @[D_FIFO_V2.scala 84:14]
    cnt_r_en <= mem_w_en @[D_FIFO_V2.scala 86:14]
    dout_v <= mem_r_en @[D_FIFO_V2.scala 88:12]
    reg mem_dout : UInt<32>, clock with :
      reset => (reset, UInt<1>("h0")) @[D_FIFO_V2.scala 92:27]
    node _T = eq(cnt_w_en, UInt<1>("h1")) @[D_FIFO_V2.scala 95:20]
    when _T : @[D_FIFO_V2.scala 95:33]
      node _T_1 = sub(UInt<6>("h20"), UInt<1>("h1")) @[D_FIFO_V2.scala 96:38]
      node _T_2 = tail(_T_1, 1) @[D_FIFO_V2.scala 96:38]
      node _T_3 = eq(cnt_w, _T_2) @[D_FIFO_V2.scala 96:21]
      when _T_3 : @[D_FIFO_V2.scala 96:46]
        cnt_w <= UInt<1>("h0") @[D_FIFO_V2.scala 97:19]
      else :
        node _cnt_w_T = add(cnt_w, UInt<1>("h1")) @[D_FIFO_V2.scala 99:28]
        node _cnt_w_T_1 = tail(_cnt_w_T, 1) @[D_FIFO_V2.scala 99:28]
        cnt_w <= _cnt_w_T_1 @[D_FIFO_V2.scala 99:19]
    node _T_4 = eq(cnt_r_en, UInt<1>("h1")) @[D_FIFO_V2.scala 104:20]
    when _T_4 : @[D_FIFO_V2.scala 104:33]
      node _T_5 = sub(UInt<6>("h20"), UInt<1>("h1")) @[D_FIFO_V2.scala 105:38]
      node _T_6 = tail(_T_5, 1) @[D_FIFO_V2.scala 105:38]
      node _T_7 = eq(cnt_r, _T_6) @[D_FIFO_V2.scala 105:21]
      when _T_7 : @[D_FIFO_V2.scala 105:46]
        cnt_r <= UInt<1>("h0") @[D_FIFO_V2.scala 106:19]
      else :
        node _cnt_r_T = add(cnt_r, UInt<1>("h1")) @[D_FIFO_V2.scala 108:28]
        node _cnt_r_T_1 = tail(_cnt_r_T, 1) @[D_FIFO_V2.scala 108:28]
        cnt_r <= _cnt_r_T_1 @[D_FIFO_V2.scala 108:19]
    node _T_8 = eq(mem_w_en, UInt<1>("h1")) @[D_FIFO_V2.scala 115:20]
    node _T_9 = eq(mem_r_en, UInt<1>("h0")) @[D_FIFO_V2.scala 115:43]
    node _T_10 = and(_T_8, _T_9) @[D_FIFO_V2.scala 115:31]
    when _T_10 : @[D_FIFO_V2.scala 115:57]
      node _cnt_data_T = add(cnt_data, UInt<1>("h1")) @[D_FIFO_V2.scala 116:30]
      node _cnt_data_T_1 = tail(_cnt_data_T, 1) @[D_FIFO_V2.scala 116:30]
      cnt_data <= _cnt_data_T_1 @[D_FIFO_V2.scala 116:18]
    node _T_11 = eq(mem_w_en, UInt<1>("h0")) @[D_FIFO_V2.scala 120:20]
    node _T_12 = eq(mem_r_en, UInt<1>("h1")) @[D_FIFO_V2.scala 120:44]
    node _T_13 = and(_T_11, _T_12) @[D_FIFO_V2.scala 120:32]
    when _T_13 : @[D_FIFO_V2.scala 120:57]
      node _cnt_data_T_2 = sub(cnt_data, UInt<1>("h1")) @[D_FIFO_V2.scala 121:30]
      node _cnt_data_T_3 = tail(_cnt_data_T_2, 1) @[D_FIFO_V2.scala 121:30]
      cnt_data <= _cnt_data_T_3 @[D_FIFO_V2.scala 121:18]
    node _T_14 = eq(mem_r_en, UInt<1>("h1")) @[D_FIFO_V2.scala 127:19]
    when _T_14 : @[D_FIFO_V2.scala 127:30]
      node _mem_dout_T = bits(cnt_r, 4, 0) @[D_FIFO_V2.scala 129:27]
      infer mport mem_dout_MPORT = memory[_mem_dout_T], clock @[D_FIFO_V2.scala 129:27]
      mem_dout <= mem_dout_MPORT @[D_FIFO_V2.scala 129:18]
    node _T_15 = eq(mem_w_en, UInt<1>("h1")) @[D_FIFO_V2.scala 133:19]
    when _T_15 : @[D_FIFO_V2.scala 133:30]
      node _T_16 = bits(cnt_w, 4, 0) @[D_FIFO_V2.scala 135:15]
      infer mport MPORT = memory[_T_16], clock @[D_FIFO_V2.scala 135:15]
      MPORT <= io.din @[D_FIFO_V2.scala 135:23]
    node _T_17 = eq(cnt_data, UInt<6>("h20")) @[D_FIFO_V2.scala 142:20]
    when _T_17 : @[D_FIFO_V2.scala 142:39]
      full <= UInt<1>("h1") @[D_FIFO_V2.scala 143:14]
    else :
      full <= UInt<1>("h0") @[D_FIFO_V2.scala 145:14]
    node _T_18 = eq(cnt_data, UInt<1>("h0")) @[D_FIFO_V2.scala 148:20]
    when _T_18 : @[D_FIFO_V2.scala 148:30]
      empty <= UInt<1>("h1") @[D_FIFO_V2.scala 149:15]
    else :
      empty <= UInt<1>("h0") @[D_FIFO_V2.scala 151:15]
    io.dout_v <= dout_v @[D_FIFO_V2.scala 155:15]
    io.dout <= mem_dout @[D_FIFO_V2.scala 158:13]
    node _io_din_r_T = not(full) @[D_FIFO_V2.scala 161:18]
    io.din_r <= _io_din_r_T @[D_FIFO_V2.scala 161:14]

